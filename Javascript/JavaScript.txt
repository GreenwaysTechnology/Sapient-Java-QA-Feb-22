					Java Script
.............................................................................................

Software Setup:

1.Node.js
2.vscode
3.browsers

What is javaScript?

 java script is a programming language like c++,c,java...

Every programming language follows some style -  Object Oriented,Procedural,Functional Programmming.

C++ -  C++ is object oriented Programming language
Java-  object oriented Programming language.

some langugages follows 2 or 3 styles -  hybrid style programming

Javascript is object based,functional style ,event driven programming lanugage.

Java 8 on wards java is also called "object oriented , functional style" programming language.

         Programming languages can be classifed based on "Data Types-Type System"

1.Strongly Typed / Static Typed Programming language

 The type of variable is verified during compile time 

 int a =10;
  a="hello" // compiler will give an error

c,c++,java,C#,scala	


2.Dynamic Typed/Weak Typed Programming language

 The type of variable is verified during  run time

 var a =10;
 a="hello"

Javascript is object based,functional style ,event driven,dynamic typed programming lanugage.

Why Javascript was created? History of Javascript:

 Javascript was created at Netscap Communications by Brendan Eich.

Birth of Web:
 The World Wide Web was invented by British scientist Tim Berners-Lee in 1989 while working at CERN to distribute documents(web documents written in HTML) via internets through out world.

1989 -Birth of Web

First Web Browser : line mode web browser
First WEB URL :http://info.cern.ch/hypertext/WWW/TheProject.html
First Web Server :NeXT machine

1992 - Web Was used outside CERN


1995 - Till this date Web was static 
   Hand coded html pages.

In 1995 ,many people started thinking about web , regarding how to convert existing biz system into web system.

1996 Dynamic content Technology was created:
 
   HTML pages were created onfly with database records

CGI -  COMMON Gateway Interface-C,Perl
J2ee - Servlets and JSP
ASP  -  Microsoft
PHP  -  Open source 

Nets cap communications also wanted to create server side technology but who failed. 

NetsCap decided to create client side technology -  how to manipulate rendered html on fly.


Netscap wanted to put the lanugage inside browser looks like java but java ,who selected the programmer  Brendan Eich asked him to create new programming language to change the behaviour of web pages.

Brendan Eich created the first language looks like java but very light wieght.

1995-1996 - The name of the language called "Mocha".
1996 - Who changed name called "Live Script".
1996 - Who changed name called "Java Script".

Once the langugage was ready which was submitted to "ECMA Committee -European Computer Manufacturers Association (ECMA)"


1997 -  ECMA Committee released language 
Versions:
js 1.0  -  ECMA 1.0  /es 1.0

1998 -  New version was not available.

1999 - ECMA 3 /ES 3 Came out

2005 - AJAX was introduced

2007  - ES 4
2008  - ES 5
2012 to 2017 -  ES 6
2018.....
2018 -  javascript was introduced inside server side computing via "node.js"

Now Javascript is every where  - browsers,servers,mobile,devices................
..............................................................................................
				ES 5 AND 6
..............................................................................................

Javascript language learning path:
.................................

1.language fundementals
2.javascript functions
3.javascript object based 
4.DOM programming
5.Server side programming



1.language fundementals:


src/index.js
//hello world
console.log("Hello Javascript");


variables,typesystem,values(literals)

javascript is untyped/dyamic typed language.

keyword variableName=value(literals)

var | let | const | this | variablename=literals(value)


literals - values: based on literal only the type of variable is decided during runtime.
; optional

types of literals

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object


Strings:
=>basic literal , its size 16 bit unicode character
=> "" , '' ,``(back tick - es 6)


//variable declaration
var firstName = "Subramanian"
var lastName = 'Murugan'
//+ string concatnation
console.log(" Name " + firstName + lastName)
// ,
console.log(" Name ", firstName, lastName)
//String interpolation : es 6 feature
console.log(`Name ${firstName} ${lastName}`)
//back tick `` usage
//multi line string
var title = 'Sapient'
var doc = "<html>" +
    "<head>" +
    "<title>" + title + "</title>" +
    "</head>" +
    "<body>" +
    "<h1>Hello</h1>" +
    "</body>";
console.log(doc)

var docOne = `<html>
           <head>
            <title>${title}</title>
            </head>
          <body>
            <h1>Hello</h1>
          </body>
        `;
console.log(docOne)
..............................................................................................

Number:

=>It is 64 bit  by default aka double.
//Numbers

var i = 100;
var j = 200;
var r = i * j
console.log(`I ${i} j${j} r ${r}`);


Booleans:

=>it is 1 bit value

var isFound = true;
var isEnabled = false;
console.log(`isFound ${isFound} isEnabled ${isEnabled}`)


undefined:

=>it is built in value(literal)
=>it is initalized to a variable when the variable has no valid literals(numbers,strings,booleans,objects,functions)

//undefined

var a;
var b;
console.log(`a ${a}  b ${b}`)
..............................................................................................

NaN -  Not a Number

=>It is number inside javascript
=>The number which indicates Runtime error code.
=>NaN represents numerical computation error

when you will get NaN.
1.if you do compuation against undefined variables.
//NaN
//NaN due to computatio against undefined

var a; // undefined
var b = 100;
var c = a * b;

console.log(`a ${a} b ${b} result ${c}`)

2. when you do type conversion ; string to number.

type conversion; 
 implict and explict.  String to Number

implicit : 
  javascript automatically converts string representation of numbers into number type

eg:
//Type conversion : implicit

var a = 100; // a is number
var b = "10" // b value is number but type is string
var c = a * b; //here before computation js converts "10" into 10
console.log(`a ${a} b${b} result ${c}`)

Explicit Conversion:
1.via builit in js apis
  parseInt,parseFloat,Number()

parseInt() -  converts any string into number based on 32 bit(int)
parseFloat() -converts any string into number based on 64 bit(double)

//Type conversion : explicit

var a = 100; // a is number
var b = "10" // b value is number but type is string
var c = a * parseFloat(b); //here before computation js converts "10" into 10
console.log(`a ${a} b${b} result ${c}`)

Number():
  it is constructor function/api used to convert string to number

//Type conversion : explicit

var a = 100; // a is number
var b = "10" // b value is number but type is string
var c = a * Number(b); //here before computation js converts "10" into 10
console.log(`a ${a} b${b} result ${c}`)

2.Using "+" operator

+ operator can be used

1. to add two numbers
2. for string concatation
3. for string to number conversion -unary +
//Type conversion : explicit

var a = 100; // a is number
var b = "10" // b value is number but type is string
var c = a * +b; //here before computation js converts "10" into 10
console.log(`a ${a} b${b} result ${c}`)


NaN and Type conversion:
.........................
 NaN may come when u apply implicit and explicit pattern
//Type conversion : explicit

var a = 100; // a is number
var b = "$10" // b value is number but type is string
var c = a * b
console.log(`a ${a} b${b} result ${c}`)

Note:
 if you get NaN, you have to fix it , because it is bug.

.............................................................................................

infinity :

=>it is value , you get this value when you divide any number by 0.
var a =100;
var b =0;
var c = a /b;
console.log(`a ${a} b ${b} result ${c}`)

............................................................................................
				  Operators

1.Assignment operators
2.Comparison operators
3.Arithmetic operators
4.Bitwise operators
5.Logical operators
6.String operators
7.Conditional (ternary) operator
8.Comma operator
9.Unary operators
10.Relational operators
11.other operators
   (typeof,new , instanceof,in, dot(.) ,[](subscript ,*)



1.Assignment Operators:

expanded version
x = x + 10

shortcut
x += 10	
   
//operators

var a = 10;
var b = 20
var c = a + b
c = c + 10
console.log(`c ${c}`)
c += 10
console.log(`c ${c}`)
..............................................................................................
					Comparsional Operators


1.equal and not equal

A.==
B.===

//equal operator

var a = 10;
var b = 10;
//compare two values
var c = a == b; // == equal operator
console.log(`c ${c}`)


//here we compare x and y , but values are equal, but types are not equal, but result is true : Bug in the language itself.
var x = 10;
var y = "10";
var z = x == y;
console.log(`z ${z}`)

//=== - This is right comparsion
var z1 = x === y;
console.log(`z1 ${z1}`)


== vs ===

=> double equal only validates value equality
=> triple equal validates value + type equality - This is recommended operator.

!= and !== => it is recommended for negative equality validation

Other comparsional operators
>,<,>=,<=
.............................................................................................
				 Logical Operators


1.And - &&
2.Or   -||
3.Not  -! - which converts true to false and false to true
4.inverter - !! -  which keeps true to true only.

var isValid = true;
var res = !!isValid;
console.log(`Res ${res}`)				
.............................................................................................
                                Runtime Data types

1.typeof operator is used to know the runtime data type of a variable.

typeof operator gives results in "string" representation.

Types

1.number
   ->regular number
   ->NaN
   ->infinity
2.string
3.boolean
4.undefined
5.function
6.object
   ->regular objects
   ->null

//typeof operator

var i =10;
var name = "subramanian"
var isValid = true
var j;
var k = j * 10
var x = 10/0
console.log(`The type of i is ${typeof i}`)
console.log(`The type of name is ${typeof name}`)
console.log(`The type of isValid is ${typeof isValid}`)
console.log(`The type of j is ${typeof j}`)
console.log(`The type of k is ${typeof k}`)
console.log(`The type of x is ${typeof x}`)
...............................................................................................				 control statements
..............................................................................................
if..else, if...else if, switch case.

//if condition
var i = 10;
var j = 20;

//logical and comparsional operators always gives boolean result. -  either true or false.

if (i === j) {
    console.log('i and j are equal')
} else {
    console.log('i and j are not equal')
}
//if ..else if
var time = 3
if (time < 10) {
    greeting = "Good morning";
} else if (time < 20) {
    greeting = "Good day";
} else {
    greeting = "Good evening";
}
console.log(greeting)

var today = 3
var day="";
switch (today) {
    case 0:
        day = "Sunday";
        break;
    case 1:
        day = "Monday";
        break;
    case 2:
        day = "Tuesday";
        break;
    case 3:
        day = "Wednesday";
        break;
    case 4:
        day = "Thursday";
        break;
    case 5:
        day = "Friday";
        break;
    case 6:
        day = "Saturday";
}
console.log(`Today is ${day}`)
.............................................................................................
			tenary operator : can be used to replace if...else

//if condition
var i = 10;
var j = 20;

//logical and comparsional operators always gives boolean result. -  either true or false.

if (i === j) {
    console.log('i and j are equal')
} else {
    console.log('i and j are not equal')
}

//tenary operator
i === j ? console.log('i and j are equal') : console.log('i and j are not equal')

var result = i === j ? "i and j are equal" : "i and j are not equal"
console.log(result);
.............................................................................................
				Advanced boolean

What can be true and false?

In c:
.......

int a =10;

if(a>10){

}
here "if" evaulates condition and gives result either true or false

#include <stdio.h>

int main()
{
    int a =10;

if(a){
     printf("true");
}else{
  printf("false");
}
}


In c language 0 consider false, everthing is true


in java
.......

int a =0

if(a){

}else{

}


int a =10

if(a){

}else{

}
In java we can pass only boolean values to if statement.
..............................................................................................

In javascript every thing is true, except the following values

Falsy values

1.boolean false
2.0
3."",''
4.undefined
5.NaN
6.null


var a = 10;
if (a) {
    console.log('a is true')
} else {
    console.log('a is false')
}
a = 0
if (a) {
    console.log('a is true')
} else {
    console.log('a is false')
}
var firstName=""
if (firstName) {
    console.log('firstName is true')
} else {
    console.log('firstName is false')
}
var city;
if (city) {
    console.log('city is true')
} else {
    console.log('city is false')
}
var res = 10 * undefined
if (res) {
    console.log('res is true')
} else {
    console.log('res is false')
}
//tenary and booleans

var message;
var greet = message ? "Hello" : "Hai";
console.log(greet)
..............................................................................................
				 || , && ,! Operators and boolean expressions
..............................................................................................

|| Operator:

 city || "Chennai";

 here city is operand

  "if first operand is true(truthy),the result would be the first Operand itself else second operand"

// ||

// ||

var a = 10;
var b = 100;
var x = 10;
var y = 90;

var result = (a < b) || (x > y) // true || false
console.log(`Result is ${result}`)

//|| can be used with other values

var city = "Coimbatore";
var myCity = city || "Chennai";
console.log(`My city ${myCity}`) // true
city=""
console.log(`My city ${city || "newyork"}`)


&& : Opposit of "||" operator

"if first operand is true(truthy),the result would be the second Operand  else first operand"

// &&

var a = 10;
var b = 100;
var x = 10;
var y = 90;

var result = (a < b) && (x > y) // true && false
console.log(`Result is ${result}`)

//&& can be used with other values

var city = "Coimbatore";
var myCity = city && "Chennai";
console.log(`My city ${myCity}`) // true
city=""
console.log(`My city ${city && "newyork"}`)


! Operator

//! operator

var isValid = true;
var result = !isValid;

console.log(`Boolean not result ${result}`)

var city = "Coimbatore"
var myres = !city ? "yourcity" : "mycity"
console.log(myres)
.............................................................................................
				  Loops

for - loops through a block of code a number of times
for/in - loops through the properties of an object
for/of - loops through the values of an iterable object
while - loops through a block of code while a specified condition is true
do/while - also loops through a block of code while a specified condition is true
//loops

for (var i = 0; i < 10; i++) {
    console.log(i);
}

console.log("while")
var j = 0;
while (j < 10) {
    console.log(j)
    j++;
}
..............................................................................................
				 Functions
.............................................................................................

function is core/basic building block for encapsulating code.
function is unit of computation.
function represents the execution of some logic.

How to declare function? how to run/execute/invoke the function?

function FunctionName() {
  //function body
}
//invoke the function
FunctionName();

//function declaration

function sayHello() {
    console.log('hello')
}
sayHello();
..............................................................................................

Function with Biz logic:
//function with logic

function add() {
    var a = 10;
    var b = 20;
    var c = a + b
    console.log(`The result is ${c}`)
}

function substract() {
    var a = 10;
    var b = 20;
    var c = a - b
    console.log(`The result is ${c}`)
}

function multiply() {
    var a = 10;
    var b = 20;
    var c = a * b
    console.log(`The result is ${c}`)
}

function div() {
    var a = 10;
    var b = 20;
    var c = a / b
    console.log(`The result is ${c}`)
}

add();
substract()
multiply()
div()
.............................................................................................
				 Function args and Parameters

What is args?
 receiving

What is parameter?
 passing

//function with args
//name is arg
function sayHello(name) {
    console.log(`Hello ${name}`);
}
//'Subramanian' - Parameter
sayHello('Subramanian')

//multiple parameters

function add(a, b) {
    var c = a + b;
    console.log(`Add Result is ${c}`)
}
add(10,10)

//parameters can be any type of value - numbers,strings,undefined,NaN,object,function...

function sayHello(name) {
    console.log(`Hello ${name}`)
}
//pass value
sayHello('Subramanian')
sayHello(10);
//no value
sayHello() //undefined
/////////////////////////////////////////////////////////////////////////////////////
//Runtime errors and parameters

function multiply(a, b) {
    var c = a * b;
    console.log(`The result is ${c}`);
}
multiply(10, 10)
multiply() //would cause NaN.

//default args : if args are undefined, we can supply default values
console.log('....default args....')
function multi(a, b) {
    a = a !== undefined ? a : 0;
    b = b !== undefined ? b : 0;
    var c = a * b;
    console.log(`The result is ${c}`);
}

multi(10, 10)
multi()
//es 6 default args
function calculate(a = 0, b = 0) {
    var c = a * b;
    console.log(`The result is ${c}`);
}
calculate(10, 10)
calculate()
//args are positional : positional paramerters, parameters can be passed in order only
calculate(undefined, 90) //here i want to pass only b value
/////////////////////////////////////////////////////////////////////////////////////
//more parameters
//i dont know in advance how may parameters i am going to pass.

//var args : variable arguments
function log() {
    //special variable through which you can collect all parameters
    console.log(arguments)
}
log('Hello', 'myapp', '1.0.0', 'Sapient')
log('Sapient')
log('hello', 'Sapient')

//es 6 var args: operator: Rest operator(...)
function logDetails(message,...myargs) {
    console.log(myargs,message)
}
logDetails('Greet','Hello', 'myapp', '1.0.0', 'Sapient')
logDetails('Sapient','1.0.0')
logDetails('welcome','hello', 'Sapient')
..............................................................................................
			    function Return values

//functions can return values(can be any value)

function sayHello() {
    return 'Hello';
}
let hello = sayHello();
console.log(hello)

function add(a = 0, b = 0) {
    return a + b; //expression
}
console.log(add(10, 10))

function sayHai() {
    return // undefined
}
console.log(sayHai())


.............................................................................................
				 Scope
..............................................................................................

Scope determines the accessibility (visibility) of variables.

JavaScript has 3 types of scope:

Function scope
Block scope
Global scope


Function scope:
  if any variable is declared within function or function args variable is conderised "function scope".
 function scoped variables not accessible outside the function.
 This is some time called "local scope".


//function scope

function add() {
    var a = 10;
    var b = 20;
    var c = a + b;
    console.log(`a ${a} b ${b} c${c}`)
}
add();
//trying to access the function scoped variable
console.log(`a ${a} b ${b} c${c}`) //error Uncaught ReferenceError: a is not defined
//at index.js:11:18
//////////////////////////////////////////////////////////////////////////////////////////
				 Block scope
..........................................................................................

block means group, if any variable is declared with in block like "if",for loop is called "block scope".

//block scope

function login(name, password) {
    if (name === 'admin' && password === 'admin') {
        //variable status is declared within if statement : block scope
          var status = "login success"
    }
    //access the status variable outside the block
    console.log(status);

}
login("admin", "admin")

In the above we get output is "login success".

Why and How?

 if any variable is delclared inside block(if), that variable cant be accessed outside that block in c,c++,java languages
 but
 javascript does not support "block scope" by default.

How js is exposing the block scoped variables outside the block?

Before that you need to understand one concept "Hoisting"

Hositing:
........

If you want to understand hositing , we need to understand that js parsers and compilers

Javascript compilation model:
.............................

Step:-1
source code - index.js

function login(name, password) {
    if (name === 'admin' && password === 'admin') {
        //variable status is declared within if statement : block scope
          var status = "login success"
    }
    //access the status variable outside the block
    console.log(status);

}
login("admin", "admin")

Step 2:load the source into javascript engine
 <script src="src/index.js"></script>

Step 3: javascript starts parsing the code using parser

Parser changes the code, which to be compiled later

function login(name, password) {
    var status;
    if (name === 'admin' && password === 'admin') {
        //variable status is declared within if statement : block scope
       status= "login success"
    }
    //access the status variable outside the block
    console.log(status);

}
login("admin", "admin")

=>Parser moves all the declarations inside function(with in block) to function level(with in function) , this process is called as "Hositing"

Step 4: parsed code gets compiled and generates binary image


Step 5: loads the binary image into Memory and CPU.
.............................................................................................
				What if i want  block scope in Code
.............................................................................................

1.ES 5 style 
   We can implement block scope in old javascript(es5) via "IIFE" Functions.

2.ES 6 style
   We can implement block scope via keyword called "let and const".

   
     //block scope
function login(name, password) {
    //var status
    if (name === 'admin' && password === 'admin') {
        //variable status is declared within if statement : block scope
          var status = "login success"
    }
    //access the status variable outside the block
    console.log(status);

}
login("admin", "admin")
login()

//block scope with let keyword
function auth(name, password) {
    //var status
    if (name === 'admin' && password === 'admin') {
        //variable status is declared within if statement : block scope
          let isValid = "login success"
    }
    //access the status variable outside the block
    console.log('status',isValid); //Uncaught ReferenceError: isValid is not defined
    //at auth (index.js:23:26)
    //at index.js:26:1

}
auth("admin", "admin")
auth()
  
Best pratices:

1.In es 6 apps , you must use only let or const keyword only dont use "var".

.............................................................................................
				Advanced Hositing
............................................................................................

your source code

console.log(`i is ${i}`)
var i = 10;
console.log(`i is ${i}`)

output
undefined
10
How?

parserd code:
var i;
console.log(`i is ${i}`) //undefined
i=10
console.log(`i is ${i}`) // 10 

Now variables are hoisted at top levels.


console.log(`i is ${i}`)
console.log(`j is ${j}`)
var i = 10;
let j = 10;
console.log(` is ${i}`)
console.log(`j is ${j}`)

index.js:4 Uncaught ReferenceError: Cannot access 'j' before initialization
    at index.js:4:21
..............................................................................................
				 function literals


literal means value, value means can be assigned to a variable,can be passed as parameter and return from functions.

Since function itself is value(literal), can be assinged to a variable, can be passed as parameter , can be returned from another function.

let a=10;

let b = fun

//function literal

//syntax -1
function sayHello() {
    console.log('Hello')
}
//assign the function to a variable
let hello = sayHello;
hello();

//syntax 2
//here the function is assinged directly to the variable
// function has no name - anonmous function
let hai = function () {
    console.log('hai')
};
hai();
...........................................................................................
			   Anonmous functions parameters and args,returns
...........................................................................................
//anonmous function with args and parameters

// var add = function (a = 0, b = 0) {
//    return a + b;
// };
let add = function (a = 0, b = 0) {
    return a + b;
};
console.log(add(10, 10))
////////////////////////////////////////////////////////////////////////////////////////////
                                   IIFE

An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.

(function () {
  statements
})();

(functiondeclaration)()function invocation

(function () {
    console.log('init')
})()

//block scope implementation using iife functions:not recommended now a days,use let statement.

//block scope
function login(name, password) {
    //var status
    if (name === 'admin' && password === 'admin') {
        //variable status is declared within if statement : block scope
        (function () {
            var isValid = "login success"
        })();
    }
    //access the status variable outside the block
    console.log(isValid)

}
login("admin", "admin")
login()
.............................................................................................
			Function literals - Anonmous functions in ES 6
				Arrow functions


What is arrow function?
  It is syntax sugar of old es5 anonmous functions.
Arrow functions helps to remove lot of code -  simple syntaxs
  

//arrow 
//es 5
let hai = function () {
    console.log('hai');
}
hai()
//arrow version
let hello = () => {
    console.log('hello');
}
hello();

//if function has only one line of body we can remove {}
let greet = () => console.log('greet')
greet();

//args and parameters
let add = (a = 0, b = 0) => {
    let c = a + b;
    return c;
}
console.log(add(10, 10))

add = (a = 0, b = 0) => {
    return a + b;
}
console.log(add(10, 10))
//if the function has only return statementwe can remove {} and return statement
add = (a = 0, b = 0) => a + b
console.log(add(10, 10))

//if function takes single arg, no default value, return the same: we can remove ()
let doStuff = message => message;
console.log(doStuff('foo'))

..............................................................................................
				Function as Parameter -Higher order function


What is higher order function?

 javascript is functional style programming language.

According to functional programming,"functions are first class citzens"

functions are literals ,so that we can

=>store into a variable
=>we can pass as parameter to another function

let myfun = function(){

};

function hello(foo){
 foo()

}
hello('hello')

var message='hello'
hello(message)

//
hello(function(){})
hello(myfun)


//Higher order function: function can be passed as parameter to another function

//a=10;b=10
//a=x;b=y
let add = function (a, b) {
    console.log(`a${a} b${b}`)
};
add(10, 10)//pass values directly
let x = 10;
let y = 70;
add(x, y)
//function as parameter
//hello=function () {
//console.log('hello');
//}

//sayGreet is called higher order function
let sayGreet = function (greet) {
    //greet()
    greet();
};
sayGreet(function () {
    console.log('hello');
});
let hai = function () {
    console.log('hai')
};
sayGreet(hai);

function sayWelcome(welcome) {
    welcome();
}
sayWelcome(function () {
    console.log('welcome')
});
/////////////////////////////////////////////////////////////////////////////////////
//arrow version
// let delay = (callback) => {
//    callback();
// }
let delay = callback => callback();
// delay(function () {
//     console.log('delay')
// });
delay(() => console.log('delay'));
let timeout = () => console.log('timeout');
delay(timeout)
/////////////////////////////////////////////////////////////////////////////////////


//higher order function and args parameter

let sayGreet = greet => {
    greet('Subramanian', 'Hello');
    greet();
}

sayGreet((name = 'foo', message = 'bar') => {
    console.log(`${message} ${name}`)
});
........................................................................................

//Higer order function and how to return values?
let sayGreet = greet => {
    let res = greet('Subramanian', 'Hello');
    console.log(res);
}

sayGreet((name = 'foo', message = 'bar') => {
    return `${message} ${name}`;
});

sayGreet((name = 'foo', message = 'bar') => `${message} ${name}`);
............................................................................................
		Advanced Higher order function : passing more functions are parameter
............................................................................................

//Passing multiple functions as parameter

// let login = (success, failure) => {
//     let userName = 'admin';
//     let password = 'admin';
//     if (userName === 'admin' && password === 'admin') {
//         success('Login success')
//     } else {
//         failure('Login failed');
//     }
// };

let login = (userName = '', password = '', success, failure) => {
    if (userName === 'admin' && password === 'admin') {
        success('Login success')
    } else {
        failure('Login failed');
    }
};

login('admin', 'admin', (status) => {
    console.log(status)
}, (err) => {
    console.log(err)
});
login('admin','admin',status => console.log(status), err => console.log(err));


login('foo','bar',status => console.log(status), err => console.log(err));

.............................................................................................
		Higher order Function: Return a function from another function

1.inner functions
2.closures


Inner functions:

functions can be declared with in function, called inner functions
inner function scope is within that function only.
//inner functions : functions are declared with in function

function outer() {
    console.log('outter')
    function inner() {
        console.log('inner')
    }
    inner();
}
outer();
//inner();

What if i want to access inner function outside outter function?

YOu have to return the function, so that we can call outside

//inner functions : functions are declared with in function

//syntax 1
// function outer() {
//     console.log('outter')
//     return function inner() {
//         console.log('inner')
//     }
// }
//syntax 2 :anonmous functions
function outer() {
    console.log('outter')
    return function () {
        console.log('inner')
    }
}
let myinner=outer();
myinner();
//calling inner function short cut
outer()();
.............................................................................................

Parameters and args,returns inner and outter function:
..............................................

function outer(x) {
    console.log('outter', x)
    return function (y) {
        // console.log('inner',y)
        return `inner ${y}`
    }
}
let value = outer(10)(34);
console.log(value);

arrow function of inner and outer function:
..........................................
// function outer(x) {
//     console.log('outter', x)
//     return function (y) {
//         // console.log('inner',y)
//         return `inner ${y}`
//     }
// }

// let outer = (x) => {
//     console.log('outter', x)
//     return (y) => {
//         // console.log('inner',y)
//         return `inner ${y}`
//     }
// }
let outer = x => {
    console.log('outter', x)
    return y =>`inner ${y}`
}
let value = outer(10)(34);
console.log(value);
..............................................................................................
				Curry Function
.............................................................................................

Curry function  which return function in turn which return function , last function can read all args of outter function.



function outer(a) {
    //  console.log('outter')
    return function (b) {
        //    console.log('inner-1')
        return function (c) {
            //      console.log('inner-2')
            return function (d) {
                //        console.log('inner-3')
                //can access all its outer function variables
                return `${a} ${b} ${c} ${d}`
            }
        }
    }
}
let res = outer('a')('b')('c')('d')
console.log(res);
//////////////////////////////////////////////////////////////////////////////////////

// let outerArrow = a => {
//     return b => {
//         return c => {
//             return d => {
//                 return `${a} ${b} ${c} ${d}`
//             }
//         }
//     }
// }

let outerArrow = a => b => c => d => `${a} ${b} ${c} ${d}`

let res1 = outerArrow('a')('b')('c')('d')
console.log(res1);
.............................................................................................
				Closures
.............................................................................................

What is closure?

 closure is inner function can access outter function local variables and arg variables.

As soon as the inner function access outter function variables it becomes closure.

//closure

// function counter() {
//     let count = 0;
//     //closure
//     return function () {
//         return ++count;
//     }
// }
let counter = () => {
    let count = 0;
    //closure
    return () => ++count
}

let inc = counter(); //here which returns function pointer
console.log(inc())
console.log(inc())
console.log(inc())

in order to understand this,you need to understand "stack".

stack is the place where functions are pushed.

When ever the function is called , it is pushed into stack, then ,from the stack "stack frames are created"

Stack frames are runtime representation of any functions.

Once the frame is removed, all memory(local variables) also removed.

In case, if the variable is refered inside inner function, that variable will not be stored inside stack frame rather in "shared" memory location, so that inner function can access those variables in n-number of times - this is called as "closure"
..............................................................................................
				Objects
.............................................................................................

Object oriented and Object based:
.................................

1.Abstraction
2.Encapsulation
3.Hierarchy
    inheritance
    has-a -composition
4.Typing
   polymorphism
5.Modularity
   
----------------------
6.Concurrency
7.Persistency

if any language follows the first 5 prinicples 100% , those languages are called object
oriented programming.

All object oriented programming languages must have classes

java script does not follow the first 5 principles , so it is called as object based languge.
javascript until es 5, no classes
..............................................................................................
                       Java script and Object based implemenation
..............................................................................................

Object has three things
1.identity
2.state
3.behaviour

Object creations in javascript?

1.constructor pattern
   -function
   -es 6 class
2.literal pattern
   without function and without pattern.

1.constructor pattern
   -function

functions in javascript is used to represent

=>unit of computation - logic
=>container for creating objects.

logic
function add(){
 
}
add();  ===> stack

class template;object
function Employee(){

}

new Employee(); ==> heap

since syntax for logic and object creations are same, in order to avoid coding confussion.
js recommends to keep function name like below.


logic:
 name 
  verb ----eg add()
  verb+Noun --- addNumbers()

object name
  name
  Noun - Employee,Order,OrderDetails,Payment
  
  
//logic
function add() {
    return 10 + 10;
}
add();

//object template
function Employee() {

}
//emp is variable,pointer to the object,reference variable
let emp=new Employee();
console.log(emp)

//object state,behaviour

state - variables,instance variables
behaviour - methods, instance methods.

how to declare state,behaviour?

using "this" keyword


//logic
function add() {
    return 10 + 10;
}
add();

//object template
function Employee() {
    //state and behaviour
    this.id = 1;
    this.name = 'Subramanian'
    //methods
    // this.calculateSalary = function () {
    //     return 100 *10;
    // }
    this.calculateSalary = (basicSalary = 100, noOfdays = 0) => basicSalary * noOfdays
}
//emp is variable,pointer to the object,reference variable
let emp = new Employee(); //constructor call
console.log(emp)
//how to access object properties
console.log(emp.id, emp.name, emp.calculateSalary(2000, 20));


Note:
                 "Arrow functions cant be used to create objects"
............................................................................................
			How to initalize the state?


1.hardcoded inside class(function)
2.after object creation
3.during object creation - constructor args && parameters



1.hardcoded inside class(function)


function Employee() {
    //state inside function
    this.id = 1;
    this.name = 'Subramanian'
    this.calculateSalary = (basicSalary = 100, noOfdays = 0) => basicSalary * noOfdays
}
let emp = new Employee(); //constructor call
console.log(emp.id, emp.name, emp.calculateSalary(2000, 20));


2.after object creation

function Employee() {
    //state
    this.id = 1;
    this.name = 'Subramanian'
    this.calculateSalary = (basicSalary = 100, noOfdays = 0) => basicSalary * noOfdays
}
let emp = new Employee(); //constructor call

//access object properties and reinitalize the value
emp.id =100;
emp.name = 'Ram'
console.log(emp.id, emp.name, emp.calculateSalary(2000, 20));

3.during object creation - constructor args && parameters

function Employee(id = 1, name = 'Subramanian') {
    //state
    this.id = id;
    this.name = name;
    this.calculateSalary = (basicSalary = 100, noOfdays = 0) => basicSalary * noOfdays
}
let emp = new Employee(2,'ram'); //constructor call
console.log(emp.id, emp.name, emp.calculateSalary(2000, 20));

..............................................................................................
			  How many objects can i create out of single function


You can create many.


function Employee(id = 1, name = 'Subramanian') {
    //state
    this.id = id;
    this.name = name;
    this.calculateSalary = (basicSalary = 100, noOfdays = 0) => basicSalary * noOfdays
}
let emp = new Employee(2,'ram'); //constructor call
console.log(emp.id, emp.name, emp.calculateSalary(2000, 20));

let emp1= new Employee(5,'arun');
console.log(emp1.id, emp1.name, emp1.calculateSalary(2000, 20));

let emp2=new Employee(4,'karthik')
console.log(emp2.id, emp2.name, emp2.calculateSalary(2000, 20));
............................................................................................
			ES 6 Class 
...........................................................................................

//es 6 class
// function Employee(id = 1, name = 'Subramanian') {
//     //state
//     this.id = id;
//     this.name = name;
//     this.calculateSalary = (basicSalary = 100, noOfdays = 0) => basicSalary * noOfdays
// }

class Employee {
    //special function ; constructor function
    salary = 100;
    constructor(id = 1, name = 'Subramanian') {
        this.id = id;
        this.name = name;
    }
    //methods
    calculateSalary(value) {
        return this.salary * value
    }

}

let emp = new Employee(2, 'ram'); //constructor call
console.log(emp.id, emp.name, emp.calculateSalary(800));
..............................................................................................
				 Literal pattern
..............................................................................................


// let employee = {
//     id: 1,
//     name: 'Subramanian',
//     calculateSalary: function () {
//         return 100
//     }
// }


// let employee = {
//     id: 1,
//     name: 'Subramanian',
//     calculateSalary: ()=> {
//         return 100
//     }
// }


let employee = {
    id: 1,
    name: 'Subramanian',
    calculateSalary() {
        return 100
    }
}
console.log(employee.id, employee.name, employee.calculateSalary())
employee.id =90;
employee.name='Ram'
console.log(employee.id, employee.name, employee.calculateSalary())
.............................................................................................
				hierachy - has-a
.............................................................................................

Object has a another object.

//has-a

class OrderService {
    constructor() {

    }
    findAllOrders() {
        return 'orders'
    }
}
class OrderController {
    constructor(orderService = new OrderService()) {
        //has-a
        this.orderService = orderService
    }
    fetchOrders() {
        return this.orderService.findAllOrders();
    }
}
let orderCtrl = new OrderController();
console.log(orderCtrl.fetchOrders())

Has-a and literal object:
//literal objects and has-a

let employee = {
    id: 1,
    name: 'subramanian',
    //has-a - nested object
    address: {
        city: 'Coimbatore'
    }
}
console.log(employee.name,employee.address.city)
..............................................................................................
				Javascript Builtin Objects
..............................................................................................

Javascript built in objects can be classified into two category

1.POJOS -  Plain old javascript objects

2.DOM -  Document Object Model -  User interfaces(HTML Related)
		

1.POJOS -  Plain old javascript objects
 JS offers lot of utility objects.

1.Array
   Every pl has datastructure, js has datastructure -  Array

Array is object , which holds collection of any type of values.
Array is dynamic like List in java.
Since array is object , which has lot of methods for array processing.

Recommend Link for mastering arrays:
https://www.w3schools.com/js/js_arrays.asp
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

iterators:

1.forEach
2.filter
3.map
etc...

//
let list = [1, 2, 3, 4, 5, 6] //numbers

list.forEach((value, index) => {
    console.log(`index ${index} value ${value}`)
});

//list of employees
let empList = [
    { id: 1, name: 'a', salary: 1000 },
    { id: 2, name: 'b', salary: 4000 },
    { id: 1, name: 'c', salary: 6000 }
];
empList.forEach((emp, index) => {
    console.log(`index ${index} value ${emp.name} ${emp.salary}`)
});
..............................................................................................
				Wrapper Objects
.............................................................................................

int -Integer

Every values in js object finally

1.Number -
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number

2.String
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

3.Boolean


10 ---> Number()
Number is a primitive wrapper object used to represent and manipulate numbers like 37 or -9.25.
//wrapper objects

let a = 10.7865897;
console.log(a.toFixed(2))

let str = "subramanian".trim();
console.log(str.toUpperCase())
.............................................................................................
				 Math
.............................................................................................
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math

console.log(Math.random().toFixed(2))
..............................................................................................

Advanced Objects
.................				
1.JSON  - JSON parser
2.Promise
etc......
..............................................................................................
				DOM - How to build browser application- UI Technologies
..............................................................................................

HTML:

What is HTML?
  HTML is programming language.

Programming can be classified based on applications.

1.GPL - General Purpose Language
   Programming language used to build many category apps.
  c,c++,java....
2.DSL - Domain Specific language
   Language built for specific domain. The language cant be used for other purpose.
HTML is one the DSL language.
 HTML was created to "design documents"

Document Design programming language:
In 1960, IBM and Xerox joined together who built a language to create computer based document systems- GML(Generalized Markup lanauge).
Based on GML many document design languages were created.

				 GML
				  |
 ----------------------------------------------------------------------------------------
 |          |                      |           |  
MathML   HTML(1989)             XML(1996)    (WML)  etc.....


HTML language created to design document that can be linked together based on hyper links
and distributed over "internet" via special software called "WebServer" via special transport called "HTTP protocal", and can be viewed special software called "Web Agents" -Web Browsers.

..............................................................................................
				HTML Compilation and Runtime Architecture
.............................................................................................

Any Programming  has three stage

1.source code
2.compiled code
3.Runtime code

Java:

Hello.java
 |
compile
 |
Hello.class
 |
Hello

Do you think that Html is compiled and executed?


index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>
  -------------------Browser
loader---LOAD Code into browser
 |
   from file: or http:
 |
Parser : Parser is special compiler which converts source into lexcial tree(string tree)
|
body
  div
     h1
        Welcome 
     h1
  div
body
|

 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
.........................Compile Time Phase finished--Runtime Begins.....
 |

-------------------------Execution cycle------------------------------------
         HTML Execution engine : Request OS ,to allocate memory :Runtime
-LinkedList
body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body
Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
body
|
 Layout/Paint Engine: will convert nodes into pxs : final output
..............................................................................................

In 1996 , The company called "Netscap Communication", Started a project, How to access the tree from the browser
Why should we access the tree?
 We have to manipulate the tree -  addding new node, update existing node content, remote node,get a single node, apply some styles.

Netscap introduced a c api to access the tree, but who failed, so that they decided to put java language to access the tree , again who could not use java language.

So netscap decided to create light weight programming language, to access the tree "Birth of Javascript".

How to access the c tree inside javascript engine?

 Who proposed a model , that model we call "Object oriented Model" , To represent every html element as "Object"

eg:
  div element----->div node------div Object

objects forms tree, called "Object tree".

Those objects are called DOM -  Document Object Model(object oriented html).

 "According to DOM , every html element is Object, which forms Hierachy(tree)"
  Every object is created by Javascript only, we cant create using new operator"
  We can access the created objects, we can create objects using factory apis"
..............................................................................................
				DOM programming
.............................................................................................	

What is inheirtance?
   Way of code sharing , from base class to dervied.

Since javascript object based, there is no class based inheritance.

class based inheritance means "compile inheritance"  -C++,Java,C#

javascript follows object based inheritance, object inherits other objects this special type of inheritance called "Prototypical inheritance".

In javascript , every object has Super object(parent object).

In javascript we have superium object called "object"
..............................................................................................
				   Object
				     |
 ----------------------------------------------------------------------------------------->
 |               |
Your Object  BuiltIn Objects

Object:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
	

function Employee (){
    this.id=1;
}
let emp =new Employee();//User defined
console.log(emp.id,emp.toString())

Object utitily methods:
Object.assign
Object.freeze
etc...
..............................................................................................

					Objects
			---------------------------------------------
			|                                         DOM
                      POJO


DOM:
  In DOM every html element is object
  DOM forms a heriachy

				
				 Object
				   |
				 Window
				   |
		-------------------------------------------------
               Document   Location    History 
                  |
              HTML Elements

Window:
  Represents a Browser

Document:
  Represents a current document
Location :
  Reprents URL in the browser

History :
  Represents collection of visited Pages

<html>
<head>
  <title>My Document</title>
</head>
<body>
  <h1>Header</h1>
  <p>Paragraph</p>
</body>
</html>

				   Window
				     |
                                  Document
				     |
				    HTML
				-------------------------
                               head		       body	
                                 |                      |
                                 title                  h1
							 |
                                    |                     Header
                                     MyDocument         |
                                                        p 
                                                         |
                                                          Paragraph


..............................................................................................

How to access the html elements using javascript?

document - reference variable represent "Document" Object
  using this you can access the elements inside body.

<body>
  <h1>Header</h1>
  <p>Paragraph</p>
</body>

apis:
Finding HTML Elements

document.getElementById(id)	        Find an element by element id
document.getElementsByTagName(name)	Find elements by tag name
document.getElementsByClassName(name)	Find elements by class name
document.querySelector(className)       Find elements by class name


<h1>Header</h1> - Element

Header---innerHTML

function getElements() {
    //get h1 element
    let heading = document.getElementsByTagName('h1')
    console.log(heading)
    for (let i = 0; i < heading.length; i++) {
            console.dir(heading[i].innerHTML); //return 
    }
}
getElements();

//get single Element
function getSingleElement(){
  let value= document.getElementById('hello')
  console.dir(value.innerHTML);
}
getSingleElement();
//var emp = new Employee()
//var document = new Document();
//var window =new Window();
//var history = new History()

..............................................................................................
				create new DOM element
..............................................................................................

Adding and Deleting Elements

Method	Description

document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

document.write(text)	Write into the HTML output stream -Dont use this api.


How to create a dom element?

Steps:

1.create new element
    var newElement = document.createElement('h2')

2.add new content to the element
  newElement.innerHTML = 'Hey i am new Element';

3.add created element on existing tree.
get the body
    document.body.appendChild(newElement)

function createElement() {
    //create h2 element
    var newElement = document.createElement('h2')
    //add innerHtml
    newElement.innerHTML = 'Hey i am new Element';
    //attach this element on existing tree.
    //where you are going to append - inside body
    //get the body
    document.body.appendChild(newElement)
    
}
createElement();
...........................................................................................
				User interactions
..........................................................................................

What is user interaction?

User can 
   click on the page, buttons,hyperlinkes
   move mouse on the page,on image,elements
   press /give inputs through keyboard

How to implement user interaction? how we can change the web page according to user interactions?

via Event handling

What is events?
  events are some actions/signals, the javascripts reacts for those actions, perform some activities accordingly

eg;
  if user moves mouse on image, then i have to zoom it.
  if user clicks button, then it moves to the next page.
  if user moves mouse on text, change the background color.

Types of events:

 1.Hardware events : mouse,keyboard,touch events
 2.application events : onload,onupdate,offline,online........

Adding interactions via Events -  DOM Events:
.............................................
 Every html element, has event attchment feature.

Event Listener:
..............
   Function which is called when ever an event is occured on dom elemement
 eg: if you move mouse on text, then listener is called. the logic of that event will be fired.

Use case:
 Change the background of a text, when i move mouse on it, when mouse left, keep the old color.
 
Syntax:

 domelement.addEventListener('nameoftheevent',function(){})

name ofthe events
1.click
2.dbclick
3.mousemove
4.mouseover
5.onpress
6.oninput
etc....

CSS and java script:
....................
 Via javascript can add CSS styles dynamically(via code).
 https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference
domelement.style.backgroundColor = 'yellow'

function changeColor() {
    //get Element
    let heading = document.getElementById('hello')
    //add event listner
    heading.addEventListener('mouseenter', function () {
        //apply the background color
        heading.style.backgroundColor = 'yellow'
        heading.style.fontSize = '50px'
    });
    heading.addEventListener('mouseleave', function () {
        //apply the background color
        heading.style.backgroundColor = null;
        heading.style.fontSize = null
    });
}
changeColor()
...........................................................................................
				 Application Events

Application events are fired not because of hardware devices -mouse,keyboard.

Where can i script tag?

->head
->body


Adding script inside head tag:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>javascript apps</title>
    <script src="src/index.js"></script>

</head>
<body>
    <h1>Javascript Apps</h1>
    <h1>DOM</h1>
    <h1>HTML</h1>
    <h1>XML</h1>
    <h1>WML</h1>
    <p id="hello">hello , How are you?</p>
    
</body>
</html>

index.js

function changeColor() {
    //get Element
    let heading = document.getElementById('hello')
    //add event listner
    heading.addEventListener('mouseenter', function () {
        //apply the background color
        heading.style.backgroundColor = 'yellow'
        heading.style.fontSize = '50px'
    });
    heading.addEventListener('mouseleave', function () {
        //apply the background color
        heading.style.backgroundColor = null;
        heading.style.fontSize = null
    });
}
changeColor()

output:

Uncaught TypeError: Cannot read properties of null (reading 'addEventListener')
    at changeColor (index.js:5:13)
    at index.js:16:1

Why we get this error?

HTML code execution is sequential

like 
 first it will  load html,head,title, 

when it tries to encounter script tag, it starts execute the javascript , then only it will load other elements.

During execution, it tries to find out elements which not yet created, then it will throw error.

How to solve this problem?

There are two ways?

1.Add script tag inside body, at end of the body.

<body>
    <h1>Javascript Apps</h1>
    <h1>DOM</h1>
    <h1>HTML</h1>
    <h1>XML</h1>
    <h1>WML</h1>
    <p id="hello">hello , How are you?</p>
    <script src="src/index.js"></script> 
</body>

This is recommended solution.

2.Via application events- window events

Window has an event called "load", ensures that all dom tree is ready, then fire your javascript.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>javascript apps</title>
    <script src="src/index.js"></script>

</head>

<body>
    <h1>Javascript Apps</h1>
    <h1>DOM</h1>
    <h1>HTML</h1>
    <h1>XML</h1>
    <h1>WML</h1>
    <p id="hello">hello , How are you?</p>
    <!-- <script src="src/index.js"></script> -->

</body>

</html>

function changeColor() {
    
    //get Element
    let heading = document.getElementById('hello')
    //add event listner
    heading.addEventListener('mouseenter', function () {
        //apply the background color
        heading.style.backgroundColor = 'yellow'
        heading.style.fontSize = '50px'
    });
    heading.addEventListener('mouseleave', function () {
        //apply the background color
        heading.style.backgroundColor = null;
        heading.style.fontSize = null
    });
}

//add window.onload method

window.addEventListener('load', function () {
   changeColor()
})
..............................................................................................
				Event Object
..............................................................................................

How to get input from the user?

Ways

1.via html form fields- input,checkbox,radio,select,....
2.via windows methods - window.prompt,window.alert - dont use these methods


 document.getElementById('userName').addEventListener('input', function () {
        //read value of text
    })

here i want to read the text box value?
 
Solution is Event object.

Event object is bridge object between listener and dom element.

Event object is bound with every dom element.

Event object reference we can get via listener

 document.getElementById('userName').addEventListener('input', function (event) {
        //read value of text
 })

function getValue() {

    let value = ''
    //get
    document.getElementById('userName').addEventListener('input', function (e) {
        //Get the text via event object , target property returns the reference of text
        let textBox = e.target
        // console.dir(textBox.value)
        value = textBox.value
    })
    document.getElementById('btn').addEventListener('click', function (e) {
        alert(value)
        document.getElementById('showText').innerHTML = value;
    })
}
getValue();
..............................................................................................

Other Objects:

What are Cookies?
Cookies are data, stored in small text files, on your computer.

When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.

Cookies were invented to solve the problem "how to remember information about the user":

When a user visits a web page, his/her name can be stored in a cookie.
Next time the user visits the page, the cookie "remembers" his/her name.

create cookie

function createAndReadCookie(){
    document.cookie = "username=John Doe";
    console.log(document.cookie)

}
createAndReadCookie();


















































































































		


 











 