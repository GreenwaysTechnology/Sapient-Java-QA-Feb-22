                                         Java
..............................................................................................

JDK 11 - https://www.oracle.com/in/java/technologies/javase/jdk11-archive-downloads.html
Download IntelliJ IDEA - https://www.jetbrains.com/idea/download/#section=windows
Maven - https://maven.apache.org/download.cgi
.............................................................................................
				Java
.............................................................................................

What is java ? Term Java ?
 
 Java is technology.

What is Technology?
 Solving practical Problems in the real world.

What type of problem java was trying to solve? Why Java?

 SUN Micro System is the leading hardware and electronics manfacturing company in USA.

1988 - SUN setup an RND division to develop new technology for their hardwares, before that SUN was using c and c++ was the primary language for building apps. SUN decided to move out from c and c++.

C working model:

hello.c

#include<stdio.h>

void main(){
  printf("Hello");
}
 |
hello.out - Unix - Compiled code- assembly language.

Role of compiler:
1.To generate os specific code
2.Finding Syntax error
 
#include<stdio.h>

void main(){
  printf("Hello"); // api /lib/ built in function
}
void printf(char* text,int offset...){
   //which os system call
   unix_printf(text,01,10...);
}

|
Executed on OS.
|
Runtime - Program which runs the other program, Every program must have runtime.
|
loads the assemble(compiled code) into RAM(Main Memory)
|
Code is now running

.............................................................................................
Problems of c and C++.

1.if you build application using c++ on unix operating system, the same application we cant reuse on windows.
  =>many apis were built os specific.

eg:
  on windows i have an api called
 
   clearScreen() 

 The same api may not be available in Unix.

2.compiled code cant be resued across multiple operating system.


3. lot of complexity in the code.
   =>Pointers- which leaks security
   =>Threads creation was very complex.
   =>Datastructure

SUN MicroSystem who wanted to create a new Programming langugage to solve c++ issues

 =>Portablity -  Platform independant Programming lanugage

Under James Golsing, who was chief scientist, asked to create new Programming lanugage.

James and his team started working on new Programming lanugage.

=>The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia.

1988 -1989 -  OAK.

OAK failed with respect to 100 portablity.

1989 - James conviced a concept called "Virtual Computing", by looking the white paper published in 1974.
 A "virtual machine" was originally defined by Popek and Goldberg as "an efficient, isolated duplicate of a real computer machine.

James got an idea , why we should create programs for real computer,rather we create virutal computer, on which we can run program.

As result of that James invented /created a virtual Operating(simulating real Operating System).

Real Operating like windows,linux.

James created an operating system called "Virtual Machine", after creating Virtual machine 
who renamed the language and also added some modification on OAK- 
  Java Programming language
  Java Virtual Machine

                         "Write once run any where"

He developed the complete technolgy which contains tools

called:

 1.JVM
 2.language apis - JDK
 3.compiler - javac 
 4.other tools
 5.java is for running code.
 6.JRE - java Runtime Environment - Which contains jvm,libs

How JVM has been built?

  JVM is simple c program only.
.............................................................................................

Java Application development:
Requirements

1.JDK 
2.IDE

JDK contains all tools for development and testing apps

1.javac compiler for compiling source code into assembly

2.java command for running code.

.............................................................................................
Once the application has been built , it moves to production or testing env.

We need only JRE - Java Runtime env.

Which contains

1.jvm
2.runtime libs
..............................................................................................
				Java Programming language
..............................................................................................

What is Java Programming language?
  Java Programming language is object oriented,functional style programming language.
  
Java Programming language features:
...................................
 
=>Simple and Familiar.
=>Platform Independent/Portable
=>Architectural Neutral
=>Object-Oriented && Functional style
=>Robust
=>Secure - it does not allow pointers

Java was released in 1996 for public as open source technology.
.............................................................................................
Java entered in the many parts of software development particullary who played vital role in web development.
Java started growing vast, SUN decided to organize the java into three major editions

=> JSE -  Java standard Edition
   Covers core language features
=> JEE -  Java Enterprise Edition
   Web and distributed application Development
=> JME -  Java Micro Edition
   Card,Mobile

Who is developing java technology? and who is controlling java?

In the begining, SUN ,later java was acquired by Oracle, now java with Oracle.

Even though Oracle is developing and managining java, who cant controll fully , who is controlling.

Java Community Process:https://www.jcp.org/en/home/index
............................................................................................

All java technology is based on specification only. The first JCP writes a specifcation which document how technology looks like.

Any people can write implementation for the specification, 

Major Spec and its implementation.

JVM Spec:
 -Oracle JVM/Sun Hot Pot JVM
 -Open JDK JVM

Language spec and implemenation
  -Oracle

..............................................................................................

Java Programming language Learning path:

1.language fundamentals
   -variables,datatypes,literals
   -conditional statements 
   -loops
2.Object oriented programming and implementation

3.Exception Handling

4.How to work with IO

5.How to work with databases

6.DataStructure in java Collections

7.Multi Threading

1.language fundamentals:

How to setup java project?

-Plain java project
-Java project using build systems
  ->ant - very old, nobody is using now a days
  ->Maven
  ->Gradle
..............................................................................................
1.language fundamentals
   -variables,datatypes,literals
   -conditional statements 
   -loops

HelloWorld.java
  javac HelloWorld.java

java is class based object oriented programming language. so every program must start with 
class.

Poniters:

=>We can create n-number of classes
=>There must be only one main class, which starts your application
=>The class Containing main method, called main class.
=>Single java application must have only one main class.

Program types:

1.source code , FileName.java

2.compiled code FileName.class
  -class file
  -byte code 
 Assembly code , is portable across multiple os where ever jvm is present.
..............................................................................................

Modularity:

  breaking the code into files and folders, and organized based on some standards
  In java modularity is implemented via packages.

What is Package?

  logical and physical organization of java source and compiled code into folders and files.
   
  package is collection of classes and sub packages.

Every java class must begin with package.

package packagename

if there is no package statement, then it uses default package, but it is not recommended.


eg:
public class HelloWorld {
    //main method
    public static void main(String args[]) {
        //print some text on console
        System.out.println("Hello World Java");
    }
}

How to introduce package?

package com.sapient.core

as soon as if you introduce package, java compiler creates folder in the filesystem

E:\session\sapient\Java-QA\javaapps\src\main\java\com\sapient\core


package com.sapient.core;

public class HelloWorld {
    //main method
    public static void main(String args[]) {
        //print some text on console
        System.out.println("Hello World Java");
    }
}
 
Types of packages:

1.java built in packages
  java language offers lot of packages which provides api to write java application
java language package starts with
 java.lang
 java.util
 java.net
 javax.xml

Note: java and javax cant be used for our own packages -  Reserved packages

2.custom packages
  Packages created for project specific.

custom packages starts with
com.
org.
Why it starts with com and org?
 =>It is standard way of defining packages. - Coding standards

com - means company
org - organization

any commerical projects starts with "com", where as any open source projects starts "org"

com                 .sapient      .core
 |                     |            |
commerical project  company Name  Project module

com.sapient.hr.    admin;
             |       |
         main module submodule

org.apache.tomcat.server


3.Third party packages
   
 Packages distributed by thrid parties, so that we can use those packages in our applications

frameworks and libs are examples of third party

 spring framework
 junit
 mockito
etc...  

How to use the packages? to be discussed latter.
..............................................................................................

Language fundamentals:

1.data types,variables and literals

Data types:

 Java is strongly typed/static typed programming language.
 The type of variable is decided during compile time.

Data types classification:

1.primitive data types
2.reference data types/Object types

1.primitive data types

numbers
 byte,short,int,long -  whole number
Each data type has its own size.

byte:
 The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive) 

short: The short data type is a 16-bit signed two's complement integer. It has a minimum value of -32,768 and a maximum value of 32,767 (inclusive)

int: By default, the int data type is a 32-bit signed two's complement integer, which has a minimum value of -231 and a maximum value of 231-1.

long: The long data type is a 64-bit two's complement integer. The signed long has a minimum value of -263 and a maximum value of 263-1

float,double -  precision values

float: The float data type is a single-precision 32-bit IEEE 754 floating point.
double: The double data type is a double-precision 64-bit IEEE 754 floating point

chars 
 char 
The char data type is a single 16-bit Unicode character.

boolean
  The boolean data type has only two possible values: true and false. This data type represents one bit of information, but its "size" isn't something that's precisely defined.


2.Rerference types
  Size of reference types cant be fixed, collection of other types, which is calculated dynamically.

Object types
String - collection of character

..............................................................................................

Literals:
  values are stored inside variable

Integer literals:
 ->decimal -  26;
 ->hexa decimal -0x1a;
 ->binary - 0b11010;

Floating point literals
 ->10.4f/F  - floating points
 ->10.4 -double literal

String literals:
  Collection of strings
  "hello"
Character literals
  Single character
  'A'
boolean literals 
  true 
  false
.............................................................................................

Variables:
  Place holder which holds/refers the literals
variables can store prmiitive values or reference values(objects).

Variables are classified into various category:

1.local variables and args variables
  Variables are declared with any type(primitive/reference), with in method
2.instance variables
   variables are declared inside class
   instance variables can be any type (primitive/reference)
3.static variables 
    Variables are declared inside class with static keyword
   instance variables can be any type (primitive/reference
..............................................................................................

package com.sapient.core;

public class PrimitiveDataTypes {
    public static void main(String[] args) {
        //variables
        //whole numbers
        byte byteVariable = 10;
        short shortVariable = 199;
        int intVariable = 9000;
        long longVariable = 900;
        System.out.println("Whole Numbers : Integer");
        System.out.println("Byte " + byteVariable);
        System.out.println("Short " + shortVariable);
        System.out.println("Int  " + intVariable);
        System.out.println("Long " + longVariable);
        //literals
        //decimal number
        //hexa decimal
        //octal numbers
        // The number 26, in decimal
        int decVal = 26;
//  The number 26, in hexadecimal
        int hexVal = 0x1a;
// The number 26, in binary
        int binVal = 0b11010;
        System.out.println("Decimal Literal " + decVal);
        System.out.println("Hexa Decimal " + hexVal);
        System.out.println("binValue " + binVal);

        System.out.println("Precision Numbers : Floating points");
        float floatVariable = 10.5f;
        double doubleVariable = 90.78;
        System.out.println("Float  " + floatVariable);
        System.out.println("Double " + doubleVariable);
        //chars
        System.out.println("Characters : Single Char");
        char c = 'a';
        System.out.println("Char  " + c);
        //collection of Characters
        System.out.println("Characters : multi Char");
        String stringVariable = "hello";
        System.out.println("Strings  " + stringVariable);
        //boolean
        System.out.println("Boolean : true/false");
        boolean booleanVariable = true;
        System.out.println("Boolean  " + booleanVariable);


    }
}
...........................................................................................
				Underscores literals

Using Underscore Characters(_) in Numeric Literals

package com.sapient.core;

public class UnderscoreLiterals {
    public static void main(String[] args) {
        long creditCardNumber = 1234_5678_9012_3456L;
        long socialSecurityNumber = 999_99_9999L;
        float pi =  3.14_15F;
        long hexBytes = 0xFF_EC_DE_5E;
        long hexWords = 0xCAFE_BABE;
        long maxLong = 0x7fff_ffff_ffff_ffffL;
        byte nybbles = 0b0010_0101;
        long bytes = 0b11010010_01101001_10010100_10010010;
        System.out.println(socialSecurityNumber);
        System.out.println(creditCardNumber);

    }
}

You can place underscores only between digits; you cannot place underscores in the following places:

At the beginning or end of a number
Adjacent to a decimal point in a floating point literal
Prior to an F or L suffix
In positions where a string of digits is expected
..............................................................................................
				 Operators
..............................................................................................

Most of the Operators are dervied from c / c++ :
.................................................

The Arithmetic Operators
+	Additive operator (also used for String concatenation)
-	Subtraction operator
*	Multiplication operator
/	Division operator
%	Remainder operator

package com.sapient.core;

public class OperatorsDemo {
    public static void main(String[] args) {
        int result = 1 + 2;
        // result is now 3
        System.out.println("1 + 2 = " + result);
        int original_result = result;

        result = result - 1;
        // result is now 2
        System.out.println(original_result + " - 1 = " + result);
        original_result = result;

        result = result * 2;
        // result is now 4
        System.out.println(original_result + " * 2 = " + result);
        original_result = result;

        result = result / 2;
        // result is now 2
        System.out.println(original_result + " / 2 = " + result);
        original_result = result;

        result = result + 8;
        // result is now 10
        System.out.println(original_result + " + 8 = " + result);
        original_result = result;

        result = result % 7;
        // result is now 3
        System.out.println(original_result + " % 7 = " + result);
    }
}
.............................................................................................
The Unary Operators
   single operand.
 ++
The binary operators
   two operand
  a + b

+	Unary plus operator; indicates positive value (numbers are positive without this, however)
-	Unary minus operator; negates an expression
++	Increment operator; increments a value by 1
--	Decrement operator; decrements a value by 1
!	Logical complement operator; inverts the value of a boolean

package com.sapient.core;

public class UnaryOperators {
    public static void main(String[] args) {
        int result = +1;
        // result is now 1
        System.out.println(result);

        result--;
        // result is now 0
        System.out.println(result);

        result++;
        // result is now 1
        System.out.println(result);

        result = -result;
        // result is now -1
        System.out.println(result);

        boolean success = false;
        // false
        System.out.println(success);
        // true
        System.out.println(!success);
    }
}
..............................................................................................

The Equality and Relational Operators

==      equal to
!=      not equal to
>       greater than
>=      greater than or equal to
<       less than
<=      less than or equal to

All operators here , gives boolean result, like true or false.
package com.sapient.core;

public class RealtionalOperator {
    public static void main(String[] args) {
        int value1 = 1;
        int value2 = 2;
        if(value1 == value2)
            System.out.println("value1 == value2");
        if(value1 != value2)
            System.out.println("value1 != value2");
        if(value1 > value2)
            System.out.println("value1 > value2");
        if(value1 < value2)
            System.out.println("value1 < value2");
        if(value1 <= value2)
            System.out.println("value1 <= value2");
    }
}
.............................................................................................
Conditional  Operator:

&& Conditional-AND
|| Conditional-OR
?: Tenary operator

package com.sapient.core;

public class ConditionalOperator {
    public static void main(String[] args) {
        int value1 = 1;
        int value2 = 2;
        if((value1 == 1) && (value2 == 2))
            System.out.println("value1 is 1 AND value2 is 2");
        if((value1 == 1) || (value2 == 1))
            System.out.println("value1 is 1 OR value2 is 1");
        //tenary opertor
        boolean someCondition = true;
        String result = someCondition ? "Hello" : "How are you?";

        System.out.println(result);

    }
}
.............................................................................................
				 Other operators

1.new Operator -  memory allocation operator
2.instanceof operator - type verification operator
..............................................................................................
Expressions, Statements, and Blocks,Control Statements:
.......................................................

Expression:
 An expression is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value

eg:
   int result = 10 *10(expression)
   int result  = calculate();

Statements:
 Statements are roughly equivalent to sentences in natural languages. A statement forms a complete unit of execution. 

1.Assignment expressions
2.Any use of ++ or --
3.Method invocations
4.Object creation expressions

// assignment statement
aValue = 8933.234;
// increment statement
aValue++;
// method invocation statement
System.out.println("Hello World!");
// object creation statement
Bicycle myBike = new Bicycle();

Blocks:
A block is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed.

if(condition) {
  //block
}
//instance block

class A {
   
   {}
  
}
//static block
class A {
   static {}
  
}
..............................................................................................
The if-then and if-then-else ,if--elseif---else Statements

The if-then Statement without else statement:
..............................................
package com.sapient.core;

public class IFControlFlowStatement {
    public static void main(String[] args) {
        boolean isMoving = true;
//        if (isMoving){
//            System.out.println("Moving...");
//        }
        if (isMoving) System.out.println("Moving...");
        
    }
}

if...else
package com.sapient.core;

public class IFControlFlowStatement {
    public static void main(String[] args) {
        boolean isMoving = true;
       //if...else
        if (isMoving) {
            System.out.println("Moving...");
        } else {
            System.err.println("The bicycle has already stopped!");
        }

    }
}

if...else if ..else
 int testscore = 76;
        char grade;

        if (testscore >= 90) {
            grade = 'A';
        } else if (testscore >= 80) {
            grade = 'B';
        } else if (testscore >= 70) {
            grade = 'C';
        } else if (testscore >= 60) {
            grade = 'D';
        } else {
            grade = 'F';
        }
        System.out.println("Grade = " + grade);

..............................................................................................

Switch ...case:
  Unlike if-then and if-then-else statements, the switch statement can have a number of possible execution paths. 
A switch works with the byte, short, char, and int primitive data types,even enums also


package com.sapient.core;

public class SwitchCaseDemo {
    public static void main(String[] args) {
        //switch replaces if with multiple equal condtions
        int month = 8;
        String monthString;
        switch (month) {
            case 1:  monthString = "January";
                break;
            case 2:  monthString = "February";
                break;
            case 3:  monthString = "March";
                break;
            case 4:  monthString = "April";
                break;
            case 5:  monthString = "May";
                break;
            case 6:  monthString = "June";
                break;
            case 7:  monthString = "July";
                break;
            case 8:  monthString = "August";
                break;
            case 9:  monthString = "September";
                break;
            case 10: monthString = "October";
                break;
            case 11: monthString = "November";
                break;
            case 12: monthString = "December";
                break;
            default: monthString = "Invalid month";
                break;
        }
        System.out.println(monthString);
    }
}
...........................................................................................
					Loops
...........................................................................................

1.for 
  regular for.
  for..in loop
2.while
3.do..while

package com.sapient.core;

public class LoopsMain {
    public static void main(String[] args) {
        for (int i = 1; i < 11; i++) {
            System.out.println("Count is: " + i);
        }

        int count = 1;
        while (count < 11) {
            System.out.println("Count is: " + count);
            count++;
        }
        //do...while
        int counter = 1;
        do {
            System.out.println("Count is: " + counter);
            counter++;
        } while (counter < 11);
    }
}
..............................................................................................
                  Object oriented Programming and Implementation
..............................................................................................

What is Object orientation?
  It is way of building applications.
  It is style of writing code.
  It was introduced in 1960, became popular in 1970 ,C++.
  The language which follows the object orientation called "Object oriented programming   language"
Object oriented Programming langugages

1.C++
2.Java
3.C#
etc....

What is Object?
   "Every thing in this universe Object but which should be relvant to the Problem Domain/Space".

Eg:
   I am doctor, according to the doctor brian cell is object, but as a normal person 
 we dont understand about brain cell, we have not seen that.
 
As object oriented developer, we represent objects in the software domain as it is.

Object contains three things

1.state - information associated with object
2.behaviour -  methods which change the information
3.identity - to identify the object uniquly

..............................................................................................
			Objects and software systems

Software intention is to store information(data),process them,produce them.

Software design is all about how we capture the information/data, how to represent them.

Programming lanugages capture data, organize them, process them.

Programming language follows object models , which captures the data as it is in the real world.

When we capture and represent the data, we need classification. "class" -  class is core concept which capture data,how to process them.
..............................................................................................
Object oriented Concepts/principles:
....................................

1.Abstraction
2.Encapsulation
3.Hierarchy
    inheritance
    has-a -composition
4.Typing
   polymorphism
5.Modularity
6.Concurrency
7.Persistency

The language which implements these 7 principles called object oriented programming langugage.

Java has implemented all these principles.
............................................................................................
				 Object Modeling Process
............................................................................................

Object oriented Any and design

Steps :

1.Identify objects in the realtime/problem Domain. 
 eg:Banking
          Customer,Account,Loan,Employee.....


2.Appling Abstraction
   Abstraction is nothing but take necessary details from the problem domain,give up unncessary details.
 eg:
 if you go to hospital, you are now patient, now hostipal need collect only health related information not your educational details,not your personal information.

How to apply abstraction in code(java)?
 class

java syntax;

 public | package class ObjectName {
    //data - via variables with types
    //behaviour - how to change the data
    //identity  - special variable to identitfy the object
 }

What is object?

 There are two views

1.In the Problem domain
     Customer,Account,Employee
2.In the Program domain
     Object is other wise called as "instance".
   Object represent memory.
   Object means collection of variabl's memory.

  Type(className) variableName(pointer to memory address-reference)= new ClassName(); //instance /object creation
.............................................................................................
					Data types

Computer can understand only one type - number (0/1)

How to represent other information in computer?

1.Numbers
 whole - 10
 precision -10.5
2.NonNumbers
  text
  images
  videos
  sounds

In CS, data types can be two things

1.prmitives -  core types
  number,characters
  byte,int,short,long,double,float,char  

2.Custom Types
   using core types we can create custom types
 classes are used to create custom types

 class Customer {
      //state-data
    int id; //identity
    String name;
    double invoiceValue;
    String city;
 }

 Here Customer is a type, which contains other types -  {int,String,double,String]

  Customer =  {int,String,double,String}

 new Operator - used to allocate memory for custom type.
 Constructor - it is special method/function provided by language to initiate memory allocation.

 Customer customer = new Customer();
  |        |         |       |
 Type    variable   operator constructor call

Using reference variable, we can access object properties (state,behaviour,identity).

Java gives "." (dot) operator to access object properties.

























































































  













 
   










































































































  
 

















































