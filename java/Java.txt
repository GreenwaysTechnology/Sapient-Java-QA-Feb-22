                                         Java
..............................................................................................

JDK 11 - https://www.oracle.com/in/java/technologies/javase/jdk11-archive-downloads.html
Download IntelliJ IDEA - https://www.jetbrains.com/idea/download/#section=windows
Maven - https://maven.apache.org/download.cgi
.............................................................................................
				Java
.............................................................................................

What is java ? Term Java ?
 
 Java is technology.

What is Technology?
 Solving practical Problems in the real world.

What type of problem java was trying to solve? Why Java?

 SUN Micro System is the leading hardware and electronics manfacturing company in USA.

1988 - SUN setup an RND division to develop new technology for their hardwares, before that SUN was using c and c++ was the primary language for building apps. SUN decided to move out from c and c++.

C working model:

hello.c

#include<stdio.h>

void main(){
  printf("Hello");
}
 |
hello.out - Unix - Compiled code- assembly language.

Role of compiler:
1.To generate os specific code
2.Finding Syntax error
 
#include<stdio.h>

void main(){
  printf("Hello"); // api /lib/ built in function
}
void printf(char* text,int offset...){
   //which os system call
   unix_printf(text,01,10...);
}

|
Executed on OS.
|
Runtime - Program which runs the other program, Every program must have runtime.
|
loads the assembly(compiled code) into RAM(Main Memory)
|
Code is now running

.............................................................................................
Problems of c and C++.

1.if you build application using c++ on unix operating system, the same application we cant reuse on windows.
  =>many apis were built os specific.

eg:
  on windows i have an api called
 
   clearScreen() 

 The same api may not be available in Unix.

2.compiled code cant be resued across multiple operating system.


3. lot of complexity in the code.
   =>Pointers- which leaks security
   =>Threads creation was very complex.
   =>Datastructure

SUN MicroSystem who wanted to create a new Programming langugage to solve c++ issues

 =>Portablity -  Platform independant Programming lanugage

Under James Golsing, who was chief scientist, asked to create new Programming lanugage.

James and his team started working on new Programming lanugage.

=>The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia.

1988 -1989 -  OAK.

OAK failed with respect to 100 portablity.

1989 - James conviced a concept called "Virtual Computing", by looking the white paper published in 1974.
 A "virtual machine" was originally defined by Popek and Goldberg as "an efficient, isolated duplicate of a real computer machine.

James got an idea , why we should create programs for real computer,rather we create virutal computer, on which we can run program.

As result of that James invented /created a virtual Operating(simulating real Operating System).

Real Operating like windows,linux.

James created an operating system called "Virtual Machine", after creating Virtual machine 
who renamed the language and also added some modification on OAK- 
  Java Programming language
  Java Virtual Machine

                         "Write once run any where"

He developed the complete technolgy which contains tools

called:

 1.JVM
 2.language apis - JDK
 3.compiler - javac 
 4.other tools
 5.java is for running code.
 6.JRE - java Runtime Environment - Which contains jvm,libs

How JVM has been built?

  JVM is simple c program only.
.............................................................................................

Java Application development:
Requirements

1.JDK 
2.IDE

JDK contains all tools for development and testing apps

1.javac compiler for compiling source code into assembly

2.java command for running code.

.............................................................................................
Once the application has been built , it moves to production or testing env.

We need only JRE - Java Runtime env.

Which contains

1.jvm
2.runtime libs
..............................................................................................
				Java Programming language
..............................................................................................

What is Java Programming language?
  Java Programming language is object oriented,functional style programming language.
  
Java Programming language features:
...................................
 
=>Simple and Familiar.
=>Platform Independent/Portable
=>Architectural Neutral
=>Object-Oriented && Functional style
=>Robust
=>Secure - it does not allow pointers

Java was released in 1996 for public as open source technology.
.............................................................................................
Java entered in the many parts of software development particullary who played vital role in web development.
Java started growing vast, SUN decided to organize the java into three major editions

=> JSE -  Java standard Edition
   Covers core language features
=> JEE -  Java Enterprise Edition
   Web and distributed application Development
=> JME -  Java Micro Edition
   Card,Mobile

Who is developing java technology? and who is controlling java?

In the begining, SUN ,later java was acquired by Oracle, now java with Oracle.

Even though Oracle is developing and managining java, who cant controll fully , who is controlling.

Java Community Process:https://www.jcp.org/en/home/index
............................................................................................

All java technology is based on specification only. The first JCP writes a specifcation which document how technology looks like.

Any people can write implementation for the specification, 

Major Spec and its implementation.

JVM Spec:
 -Oracle JVM/Sun Hot Pot JVM
 -Open JDK JVM

Language spec and implemenation
  -Oracle

..............................................................................................

Java Programming language Learning path:

1.language fundamentals
   -variables,datatypes,literals
   -conditional statements 
   -loops
2.Object oriented programming and implementation

3.Exception Handling

4.How to work with IO

5.How to work with databases

6.DataStructure in java Collections

7.Multi Threading

1.language fundamentals:

How to setup java project?

-Plain java project
-Java project using build systems
  ->ant - very old, nobody is using now a days
  ->Maven
  ->Gradle
..............................................................................................
1.language fundamentals
   -variables,datatypes,literals
   -conditional statements 
   -loops

HelloWorld.java
  javac HelloWorld.java

java is class based object oriented programming language. so every program must start with 
class.

Poniters:

=>We can create n-number of classes
=>There must be only one main class, which starts your application
=>The class Containing main method, called main class.
=>Single java application must have only one main class.

Program types:

1.source code , FileName.java

2.compiled code FileName.class
  -class file
  -byte code 
 Assembly code , is portable across multiple os where ever jvm is present.
..............................................................................................

Modularity:

  breaking the code into files and folders, and organized based on some standards
  In java modularity is implemented via packages.

What is Package?

  logical and physical organization of java source and compiled code into folders and files.
   
  package is collection of classes and sub packages.

Every java class must begin with package.

package packagename

if there is no package statement, then it uses default package, but it is not recommended.


eg:
public class HelloWorld {
    //main method
    public static void main(String args[]) {
        //print some text on console
        System.out.println("Hello World Java");
    }
}

How to introduce package?

package com.sapient.core

as soon as if you introduce package, java compiler creates folder in the filesystem

E:\session\sapient\Java-QA\javaapps\src\main\java\com\sapient\core


package com.sapient.core;

public class HelloWorld {
    //main method
    public static void main(String args[]) {
        //print some text on console
        System.out.println("Hello World Java");
    }
}
 
Types of packages:

1.java built in packages
  java language offers lot of packages which provides api to write java application
java language package starts with
 java.lang
 java.util
 java.net
 javax.xml

Note: java and javax cant be used for our own packages -  Reserved packages

2.custom packages
  Packages created for project specific.

custom packages starts with
com.
org.
Why it starts with com and org?
 =>It is standard way of defining packages. - Coding standards

com - means company
org - organization

any commerical projects starts with "com", where as any open source projects starts "org"

com                 .sapient      .core
 |                     |            |
commerical project  company Name  Project module

com.sapient.hr.    admin;
             |       |
         main module submodule

org.apache.tomcat.server


3.Third party packages
   
 Packages distributed by thrid parties, so that we can use those packages in our applications

frameworks and libs are examples of third party

 spring framework
 junit
 mockito
etc...  

How to use the packages? to be discussed latter.
..............................................................................................

Language fundamentals:

1.data types,variables and literals

Data types:

 Java is strongly typed/static typed programming language.
 The type of variable is decided during compile time.

Data types classification:

1.primitive data types
2.reference data types/Object types

1.primitive data types

numbers
 byte,short,int,long -  whole number
Each data type has its own size.

byte:
 The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive) 

short: The short data type is a 16-bit signed two's complement integer. It has a minimum value of -32,768 and a maximum value of 32,767 (inclusive)

int: By default, the int data type is a 32-bit signed two's complement integer, which has a minimum value of -231 and a maximum value of 231-1.

long: The long data type is a 64-bit two's complement integer. The signed long has a minimum value of -263 and a maximum value of 263-1

float,double -  precision values

float: The float data type is a single-precision 32-bit IEEE 754 floating point.
double: The double data type is a double-precision 64-bit IEEE 754 floating point

chars 
 char 
The char data type is a single 16-bit Unicode character.

boolean
  The boolean data type has only two possible values: true and false. This data type represents one bit of information, but its "size" isn't something that's precisely defined.


2.Rerference types
  Size of reference types cant be fixed, collection of other types, which is calculated dynamically.

Object types
String - collection of character

..............................................................................................

Literals:
  values are stored inside variable

Integer literals:
 ->decimal -  26;
 ->hexa decimal -0x1a;
 ->binary - 0b11010;

Floating point literals
 ->10.4f/F  - floating points
 ->10.4 -double literal

String literals:
  Collection of strings
  "hello"
Character literals
  Single character
  'A'
boolean literals 
  true 
  false
.............................................................................................

Variables:
  Place holder which holds/refers the literals
variables can store prmiitive values or reference values(objects).

Variables are classified into various category:

1.local variables and args variables
  Variables are declared with any type(primitive/reference), with in method
2.instance variables
   variables are declared inside class
   instance variables can be any type (primitive/reference)
3.static variables 
    Variables are declared inside class with static keyword
   instance variables can be any type (primitive/reference
..............................................................................................

package com.sapient.core;

public class PrimitiveDataTypes {
    public static void main(String[] args) {
        //variables
        //whole numbers
        byte byteVariable = 10;
        short shortVariable = 199;
        int intVariable = 9000;
        long longVariable = 900;
        System.out.println("Whole Numbers : Integer");
        System.out.println("Byte " + byteVariable);
        System.out.println("Short " + shortVariable);
        System.out.println("Int  " + intVariable);
        System.out.println("Long " + longVariable);
        //literals
        //decimal number
        //hexa decimal
        //octal numbers
        // The number 26, in decimal
        int decVal = 26;
//  The number 26, in hexadecimal
        int hexVal = 0x1a;
// The number 26, in binary
        int binVal = 0b11010;
        System.out.println("Decimal Literal " + decVal);
        System.out.println("Hexa Decimal " + hexVal);
        System.out.println("binValue " + binVal);

        System.out.println("Precision Numbers : Floating points");
        float floatVariable = 10.5f;
        double doubleVariable = 90.78;
        System.out.println("Float  " + floatVariable);
        System.out.println("Double " + doubleVariable);
        //chars
        System.out.println("Characters : Single Char");
        char c = 'a';
        System.out.println("Char  " + c);
        //collection of Characters
        System.out.println("Characters : multi Char");
        String stringVariable = "hello";
        System.out.println("Strings  " + stringVariable);
        //boolean
        System.out.println("Boolean : true/false");
        boolean booleanVariable = true;
        System.out.println("Boolean  " + booleanVariable);


    }
}
...........................................................................................
				Underscores literals

Using Underscore Characters(_) in Numeric Literals

package com.sapient.core;

public class UnderscoreLiterals {
    public static void main(String[] args) {
        long creditCardNumber = 1234_5678_9012_3456L;
        long socialSecurityNumber = 999_99_9999L;
        float pi =  3.14_15F;
        long hexBytes = 0xFF_EC_DE_5E;
        long hexWords = 0xCAFE_BABE;
        long maxLong = 0x7fff_ffff_ffff_ffffL;
        byte nybbles = 0b0010_0101;
        long bytes = 0b11010010_01101001_10010100_10010010;
        System.out.println(socialSecurityNumber);
        System.out.println(creditCardNumber);

    }
}

You can place underscores only between digits; you cannot place underscores in the following places:

At the beginning or end of a number
Adjacent to a decimal point in a floating point literal
Prior to an F or L suffix
In positions where a string of digits is expected
..............................................................................................
				 Operators
..............................................................................................

Most of the Operators are dervied from c / c++ :
.................................................

The Arithmetic Operators
+	Additive operator (also used for String concatenation)
-	Subtraction operator
*	Multiplication operator
/	Division operator
%	Remainder operator

package com.sapient.core;

public class OperatorsDemo {
    public static void main(String[] args) {
        int result = 1 + 2;
        // result is now 3
        System.out.println("1 + 2 = " + result);
        int original_result = result;

        result = result - 1;
        // result is now 2
        System.out.println(original_result + " - 1 = " + result);
        original_result = result;

        result = result * 2;
        // result is now 4
        System.out.println(original_result + " * 2 = " + result);
        original_result = result;

        result = result / 2;
        // result is now 2
        System.out.println(original_result + " / 2 = " + result);
        original_result = result;

        result = result + 8;
        // result is now 10
        System.out.println(original_result + " + 8 = " + result);
        original_result = result;

        result = result % 7;
        // result is now 3
        System.out.println(original_result + " % 7 = " + result);
    }
}
.............................................................................................
The Unary Operators
   single operand.
 ++
The binary operators
   two operand
  a + b

+	Unary plus operator; indicates positive value (numbers are positive without this, however)
-	Unary minus operator; negates an expression
++	Increment operator; increments a value by 1
--	Decrement operator; decrements a value by 1
!	Logical complement operator; inverts the value of a boolean

package com.sapient.core;

public class UnaryOperators {
    public static void main(String[] args) {
        int result = +1;
        // result is now 1
        System.out.println(result);

        result--;
        // result is now 0
        System.out.println(result);

        result++;
        // result is now 1
        System.out.println(result);

        result = -result;
        // result is now -1
        System.out.println(result);

        boolean success = false;
        // false
        System.out.println(success);
        // true
        System.out.println(!success);
    }
}
..............................................................................................

The Equality and Relational Operators

==      equal to
!=      not equal to
>       greater than
>=      greater than or equal to
<       less than
<=      less than or equal to

All operators here , gives boolean result, like true or false.
package com.sapient.core;

public class RealtionalOperator {
    public static void main(String[] args) {
        int value1 = 1;
        int value2 = 2;
        if(value1 == value2)
            System.out.println("value1 == value2");
        if(value1 != value2)
            System.out.println("value1 != value2");
        if(value1 > value2)
            System.out.println("value1 > value2");
        if(value1 < value2)
            System.out.println("value1 < value2");
        if(value1 <= value2)
            System.out.println("value1 <= value2");
    }
}
.............................................................................................
Conditional  Operator:

&& Conditional-AND
|| Conditional-OR
?: Tenary operator

package com.sapient.core;

public class ConditionalOperator {
    public static void main(String[] args) {
        int value1 = 1;
        int value2 = 2;
        if((value1 == 1) && (value2 == 2))
            System.out.println("value1 is 1 AND value2 is 2");
        if((value1 == 1) || (value2 == 1))
            System.out.println("value1 is 1 OR value2 is 1");
        //tenary opertor
        boolean someCondition = true;
        String result = someCondition ? "Hello" : "How are you?";

        System.out.println(result);

    }
}
.............................................................................................
				 Other operators

1.new Operator -  memory allocation operator
2.instanceof operator - type verification operator
..............................................................................................
Expressions, Statements, and Blocks,Control Statements:
.......................................................

Expression:
 An expression is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value

eg:
   int result = 10 *10(expression)
   int result  = calculate();

Statements:
 Statements are roughly equivalent to sentences in natural languages. A statement forms a complete unit of execution. 

1.Assignment expressions
2.Any use of ++ or --
3.Method invocations
4.Object creation expressions

// assignment statement
aValue = 8933.234;
// increment statement
aValue++;
// method invocation statement
System.out.println("Hello World!");
// object creation statement
Bicycle myBike = new Bicycle();

Blocks:
A block is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed.

if(condition) {
  //block
}
//instance block

class A {
   
   {}
  
}
//static block
class A {
   static {}
  
}
..............................................................................................
The if-then and if-then-else ,if--elseif---else Statements

The if-then Statement without else statement:
..............................................
package com.sapient.core;

public class IFControlFlowStatement {
    public static void main(String[] args) {
        boolean isMoving = true;
//        if (isMoving){
//            System.out.println("Moving...");
//        }
        if (isMoving) System.out.println("Moving...");
        
    }
}

if...else
package com.sapient.core;

public class IFControlFlowStatement {
    public static void main(String[] args) {
        boolean isMoving = true;
       //if...else
        if (isMoving) {
            System.out.println("Moving...");
        } else {
            System.err.println("The bicycle has already stopped!");
        }

    }
}

if...else if ..else
 int testscore = 76;
        char grade;

        if (testscore >= 90) {
            grade = 'A';
        } else if (testscore >= 80) {
            grade = 'B';
        } else if (testscore >= 70) {
            grade = 'C';
        } else if (testscore >= 60) {
            grade = 'D';
        } else {
            grade = 'F';
        }
        System.out.println("Grade = " + grade);

..............................................................................................

Switch ...case:
  Unlike if-then and if-then-else statements, the switch statement can have a number of possible execution paths. 
A switch works with the byte, short, char, and int primitive data types,even enums also


package com.sapient.core;

public class SwitchCaseDemo {
    public static void main(String[] args) {
        //switch replaces if with multiple equal condtions
        int month = 8;
        String monthString;
        switch (month) {
            case 1:  monthString = "January";
                break;
            case 2:  monthString = "February";
                break;
            case 3:  monthString = "March";
                break;
            case 4:  monthString = "April";
                break;
            case 5:  monthString = "May";
                break;
            case 6:  monthString = "June";
                break;
            case 7:  monthString = "July";
                break;
            case 8:  monthString = "August";
                break;
            case 9:  monthString = "September";
                break;
            case 10: monthString = "October";
                break;
            case 11: monthString = "November";
                break;
            case 12: monthString = "December";
                break;
            default: monthString = "Invalid month";
                break;
        }
        System.out.println(monthString);
    }
}
...........................................................................................
					Loops
...........................................................................................

1.for 
  regular for.
  for..in loop
2.while
3.do..while

package com.sapient.core;

public class LoopsMain {
    public static void main(String[] args) {
        for (int i = 1; i < 11; i++) {
            System.out.println("Count is: " + i);
        }

        int count = 1;
        while (count < 11) {
            System.out.println("Count is: " + count);
            count++;
        }
        //do...while
        int counter = 1;
        do {
            System.out.println("Count is: " + counter);
            counter++;
        } while (counter < 11);
    }
}
..............................................................................................
                  Object oriented Programming and Implementation
..............................................................................................

What is Object orientation?
  It is way of building applications.
  It is style of writing code.
  It was introduced in 1960, became popular in 1970 ,C++.
  The language which follows the object orientation called "Object oriented programming   language"
Object oriented Programming langugages

1.C++
2.Java
3.C#
etc....

What is Object?
   "Every thing in this universe Object but which should be relvant to the Problem Domain/Space".

Eg:
   I am doctor, according to the doctor brian cell is object, but as a normal person 
 we dont understand about brain cell, we have not seen that.
 
As object oriented developer, we represent objects in the software domain as it is.

Object contains three things

1.state - information associated with object
2.behaviour -  methods which change the information
3.identity - to identify the object uniquly

..............................................................................................
			Objects and software systems

Software intention is to store information(data),process them,produce them.

Software design is all about how we capture the information/data, how to represent them.

Programming lanugages capture data, organize them, process them.

Programming language follows object models , which captures the data as it is in the real world.

When we capture and represent the data, we need classification. "class" -  class is core concept which capture data,how to process them.
..............................................................................................
Object oriented Concepts/principles:
....................................

1.Abstraction
2.Encapsulation
3.Hierarchy
    inheritance
    has-a -composition
4.Typing
   polymorphism
5.Modularity
6.Concurrency
7.Persistency

The language which implements these 7 principles called object oriented programming langugage.

Java has implemented all these principles.
............................................................................................
				 Object Modeling Process
............................................................................................

Object oriented Any and design

Steps :

1.Identify objects in the realtime/problem Domain. 
 eg:Banking
          Customer,Account,Loan,Employee.....


2.Appling Abstraction
   Abstraction is nothing but take necessary details from the problem domain,give up unncessary details.
 eg:
 if you go to hospital, you are now patient, now hostipal need collect only health related information not your educational details,not your personal information.

How to apply abstraction in code(java)?
 class

java syntax;

 public | package class ObjectName {
    //data - via variables with types
    //behaviour - how to change the data
    //identity  - special variable to identitfy the object
 }

What is object?

 There are two views

1.In the Problem domain
     Customer,Account,Employee
2.In the Program domain
     Object is other wise called as "instance".
   Object represent memory.
   Object means collection of variabl's memory.

  Type(className) variableName(pointer to memory address-reference)= new ClassName(); //instance /object creation
.............................................................................................
					Data types

Computer can understand only one type - number (0/1)

How to represent other information in computer?

1.Numbers
 whole - 10
 precision -10.5
2.NonNumbers
  text
  images
  videos
  sounds

In CS, data types can be two things

1.prmitives -  core types
  number,characters
  byte,int,short,long,double,float,char ,boolean

2.Custom Types
   using core types we can create custom types
 classes are used to create custom types

 class Customer {
      //state-data
    int id; //identity
    String name;
    double invoiceValue;
    String city;
 }

 Here Customer is a type, which contains other types -  {int,String,double,String}

  Customer =  {int,String,double,String}

 new Operator - used to allocate memory for custom type.
 Constructor - it is special method/function provided by language to initiate memory allocation.

 Customer customer = new Customer();
  |        |         |       |
 Type    variable   operator constructor call

Using reference variable, we can access object properties (state,behaviour,identity).

Java gives "." (dot) operator to access object properties.


package com.sapient.oo.abstraction;

public class Customer {
    //state-data
    int id=1; //identity
    String name="Subramanian";
    double invoiceValue=100.89;
    String city="Coimbatore";
    //
}

package com.sapient.oo.abstraction;

public class ObjectCreationMain {
    public static void main(String[] args) {
        Customer customer = new Customer();
        System.out.println("Id :" + customer.id);
        System.out.println("Name " + customer.name);
        System.out.println("City " + customer.city);
        System.out.println("Invoice Value " + customer.invoiceValue);
    }
}
.............................................................................................
				 Object Behaviour
..............................................................................................

What is method?

method is nothing but unit of computation.
Which performes computation.
Which mutates(change) the state(updating the variable value).

syntax:

 AccessModifer | nonAccessModifer ReturnType methodName(arg){
  //method body
  //return statement
}
package com.sapient.oo.object.behaviour;

public class Car {
    //state
    int speed = 0;
    int gear = 0;

    void start() {
        //mutation changing
        speed = 5;
    }

    void changeGear(int gear) {
        this.gear = gear;
        switch (this.gear) {
            case 1:
                System.out.println("Pressing exclator ");
                speed = 10;
                break;
            case 2:
                System.out.println("Pressing exclator ");
                speed = 20;
                break;
            case 3:
                System.out.println("Pressing exclator ");
                speed = 30;
                break;
            case 4:
                System.out.println("Pressing exclator ");
                speed = 40;
                break;
            case 5:
                System.out.println("Pressing exclator ");
                speed = 60;
                break;
            default:
                System.out.println("Reverse ");
                speed = 10;
                break;

        }
    }
}
package com.sapient.oo.object.behaviour;

public class CarMain {
    public static void main(String[] args) {
        Car car = new Car();
        //access car initial speed
        System.out.println("Speed :" + car.speed);
        //change the state
        car.start();
        System.out.println("Speed :" + car.speed);
        car.changeGear(4);
        System.out.println("Speed :" + car.speed);

    }
}
..............................................................................................

methods ,args,Parameters and returns

=> can accept any type of args-  primtives,reference Type
=> can return any type 
=> may not return - void 

package com.sapient.oo.object.behaviour;

public class Calculator {
    //with parameters and no return
    void add(int a, int b) {
        int result = a + b;
        System.out.println("Add " + result);
    }
    //with return
    int multiply(int a, int b) {
        return a * b;
    }
}
package com.sapient.oo.object.behaviour;

public class ArgsMain {
    public static void main(String[] args) {
        Calculator calculator = new Calculator();
        //
        calculator.add(10,10);
        System.out.println(calculator.multiply(10,10));
    }
}
..............................................................................................
				Types of Methods
.............................................................................................

Based on How methods are accessed:

1.instance methods
2.static methods/class methods


1.instance methods:
   
  The method declared inside class, instance methods
  instance methods can be accessed only through "reference variable" with having objects.

2.static methods
 
   The method declared inside class with static keyword/modifier
  Static methods are accessed with help of ClassName.
............................................................................................
				static keyword

static keyword can be used with variable declaration and also method declarations.

if variable declared with static , called as "class variables/static variables"
if method is declared with static, called as "class methods/static methods"
............................................................................................
				Memory Allocation - JVM internals
...........................................................................................

What is JVM?
 It is Process, written in c language.

How the process looks like?
 Every process has three segments

->heap
   - for allocating dynamic memory needed by an application
->stack
   - for allocating static memory for methods
   - methods/functions are also require memory.
   - where methods are pushed , for that memory is allocated
   -> methods memory is called "stack frame work"
->program data
   Program code memory is allocated here like literals...

Since JVM is process , it also has structure:

JVM has three segments

1.heap
    Inside heap only all objects are created and living.
2.stack
    all methods are pushed into stack, becomes the stack frame.
    main method is entry method which is pushed at the bottom of the stack
   
    when   method is called
     -> it is pushed into stack
     -> stack creates stack frame
     -> stack framework executes
     -> stack framework is closed
    
3.method area(program data)
   It is global memory area
   Which contains
   ->methods definitions
   ->stack variables
   ->classes memory before object creation/loaded .class file information
   ->literals - (string literals are living inside string constant pool).

 
All instance variables and methods live inside heap(object).

All static variables and methods live inside method Area.
All static variables are initalized during class loading process before object creation.
All static variables and methods are accessed by "className" only.

package com.sapient.oo.staticinfo;

public class Message {
   static String WARNING_INFO ="Warning";
   //static method
    static String getInfo(){
        return "INFO";
    }
}
package com.sapient.oo.staticinfo;

public class StaticMain {
    public static void main(String[] args) {
        System.out.println(Message.WARNING_INFO);
        System.out.println(Message.getInfo());
    }
}
.............................................................................................
				instance methods classification


There are two classification:

1.biz methods

2.accessor/mutator methods


1.biz methods

 represents biz process, which change the state.
public class Car {
    //state
    int speed = 0;
    int gear = 0;

    void start() {
        //mutation changing
        speed = 5;
    }

    void changeGear(int gear) {
        this.gear = gear;
        switch (this.gear) {
            case 1:
                System.out.println("Pressing exclator ");
                speed = 10;
                break;
            case 2:
                System.out.println("Pressing exclator ");
                speed = 20;
                break;
            case 3:
                System.out.println("Pressing exclator ");
                speed = 30;
                break;
            case 4:
                System.out.println("Pressing exclator ");
                speed = 40;
                break;
            case 5:
                System.out.println("Pressing exclator ");
                speed = 60;
                break;
            default:
                System.out.println("Reverse ");
                speed = 10;
                break;

        }
    }
}

2.accessor and mutators:
  setters and getters

are used to set and get instance variables outside the class.

How instance variables  are accessed?

There are different ways

Using reference variable directly
 Employee emp=new Employee();
 emp.id=1

Using reference variable via setters and getters methods

setters are methods used to initalize the data

getters are methods used to read the data.

setter Syntax:
..............

class Employee {
 int id;
 String name;
 public void setId(int id){
   this.id = id;
 }

}

1.Every setter method must have void return type
2.Every setter method must start with set+VaribleName
   -Variable Name must be Camel Case setId()
3.Ever setter method arg must match with instance variable declaration
  int id;
  public void setId(int id){
   this.id = id;
  }
4.instance variables are referenced inside method using "this" keyword
   this.id means you are refering instance variable
   id means here local variable 
   this.id =id means we assign localvariable value to instance variable


setter vs direct Reference?

Coding standards:

  Enforcing code best pratices across the team, company, community.

Java brought lot of common standard, as a java developer we should not viloate the coding standards.


File Name Coding standard:
...........................

1.File Name must be meaning full to the problem.
  a.java - invaild
  xyz.java -invalid

 Employee.java,Customer.java,WithdrawService.java - valid
 
2.File name must be noun.

3.File Name and class Name must match
 
  Employee.java

  public class Employee {}

Class name coding standard:
...........................
1.class Name must be meaningfull to the problem
  Employee -valid
  emp -invalid
2.Class Name must be always nouns only cant be verbs , should start with Capital Letter
  if there is SecondNoun, it should be also capitalized
  Employee,Customer -Nouns
  CustomerService
3.class can be marked public or without public.

instance variable coding standard
...................................

1.instance variables must be meaninful
  int a; -  invalid
  int id;
  String name;
  double salary;

2.instance variables must be nouns
   int id;
   String name;
3. instance variables must be camel cased
   String firstName;

4. instance variables must be marked "private"
   private int id;
   private String name;

5. instance variables must be initalized via
   setters or constructors / setters and constructors but directly
	
   customer.id =10; //invalid
   
public class Employee {
    private String name;
    //instance variables
    private int id;

    public void setId(int id) {
        this.id = id;
    }
    public void setName(String name){
        this.name = name;
    }
}

5. instance variables must be read via
   getters.

   public returnType getVariableName(){
        return instancevariableName
   }

instance method coding standard:
................................

1.methods must be meaningfull
  calculate()
2.methods must start with smallar case
  calculate()
2.methods must be "verbs" , not nouns
  add() -valid
  Addition() - invalid
3.methods may mix verb + noun, noun should start with upper case
   addNumber()
   calculateSalary()
   depositMoney()
  
static variables coding standards:

1.should be capitalized
   WARNING
2.INCASE LONG names,_ should be used
  WARNING_INFO
3.all static variables must be marked public
   public static String WARNING_INFO ="Warning";
4.all static variables can be marked final
   public static final String WARNING_INFO ="Warning";

static methods coding standards

=>similar to instance methods
..............................................................................................
				Java Bean Coding standards

In 1996, SUN introduced coding standard called "java bean coding standards" , in order to declare class, instance variables, how it can be initalized and read.
 setters and getters are part of that javabean standards.
..............................................................................................
					Encapsulation
..............................................................................................

The meaning of Encapasulation is "hidding".

How to share code  and how much code we can share , at what extend we can share?

Code sharing;
 code means classes and its members.

Encapsulation in java is implemented through keywords - access modifiers.

-public
-private
-default(package level)
-protected
 
public means we can share code any where in the application.

class can be public, meaning that it can be accessed any where in the application.

                                 Modularity

Java applications are classified into modules callead as packages.

Each package defines a boundry for classes

public: 
  can be accessed with in package.
  can be accessed outside the package.
public classes:
  
Use case 1 : within package.

package com.sapient.enc.pub;

public class Employee {
}

package com.sapient.enc.pub;
public class EmployeeMain {
    public static void main(String[] args) {
        Employee employee = new Employee();
    }
}

Use case 2: Outside package

if classes are in the different packages, we have to import them.


package com.mycom.example;

import com.sapient.enc.pub.Employee;

public class EmployeeMain {
    public static void main(String[] args) {
        Employee employee = new Employee();
    }
}

syntax of import:

import com.sapient.enc.pub.*; => import or link all the classes defined inside this package
    
import com.sapent.enc.pub.Employee => import only Employee class defined inside this package
  -This is recommended

Rule for import:

if classes are defined inside the same package, you dont need to use "import" statement to link classes, java does automatically.

com.sapient.core
class Employee{}

com.sapient.core
class Main{
  main{
    Employeee employee=new Employee();
  }
}

if classes are in the different package , only you have to import.
..............................................................................................
				public instance variables and methods
..............................................................................................

we can declare public instance variables, but it is not recommended as per java bean coding standard.

package com.sapient.enc.pub;

public class Customer {
    public int id;
}

we can declare public instance methods.

public class Customer {
    public int id;
    public void save(){
        System.out.println("save");
    }
}
we can declare public constructors : to be dicussed later
...........................................................................................
				 private

private means not possible to share outside the class.

class and private:

 classes cant be marked private

private class Employee {
} //error

private instance variables and methods

-private variables cant be accessed outside the class

public  class Employee {
    private int id;
    
}
Note: all instance variables must be marked private as per java coding standard.

private instance methods:
..........................

-> methods can be marked private, can be accessed outside class.
   Private methods are used to encapuslate internal logic of object.
package com.sapient.enc.pri;

public class Authentication {
    private String username;
    private String password;

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    //
    public boolean login() {
        //access the private method
        return auth();
    }
    private boolean auth(){
        if (this.username == "admin" && this.password == "admin") return true;
        return false;
    }
}
package com.sapient.enc.pri;

public class Main {
    public static void main(String[] args) {
        Employee employee =new Employee();
      //  employee.id
        Authentication authentication = new Authentication();
        authentication.setUsername("admin");
        authentication.setPassword("admin");
        String res = authentication.login() ? "Login success" : "Login failed";
        System.out.println(res);
    }
}

priavate constructors : to be discussed 
..............................................................................................
			static variables and methods, with private and public


static variables can be marked public : this is always coding standard
   public static final String WARNING_INFO ="Warning";

static methods can also can be marked public
   public  static String getInfo(){
        return "INFO";
   }

static variables can be marked private in certain conditions only.
..............................................................................................
				default modifier

if any to be restricted with in the package only, then it called package level modifer.

in order to declare package level , there is no explicit keyword,no keyword is presented

class and default modifier:

class Employee{}
 here no keyword in front of class.

valid code
package com.sapient.enc.def;

//in default scope
class Employee {
    private  int id;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }
}
package com.sapient.enc.def;

public class Main {
    public static void main(String[] args) {
        Employee employee = new Employee();
        employee.setId(10);
        System.out.println(employee.getId());
    }
}

Invalid access:

package com.sapient.enc.def.subpack;
//'com.sapient.enc.def.Employee' is not public in 'com.sapient.enc.def'. 
// Cannot be accessed from outside package
import com.sapient.enc.def.Employee;
public class Main {
    public static void main(String[] args) {

    }
}

You can declare class package level based on your application use cases.

instance variables and methods:

We can declare instance variables and methods package level.

if class is public but variables and methods are default, 
   "You can access only class but not variables and methods.

static variables and methods are also can be declared default scope.
..............................................................................................
				state initalization
.............................................................................................

state can be initized in three ways

1.hardcoded inside class.

2.after object creation
  2.1.using reference variable- not recommened
  2.2.using setters

3.durating object creation
  constructors



1.hardcoded inside class.
package com.sapient.oo.state.init;

public class Employee {
    private int id = 1;
    private String name = "Subramanian";

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
package com.sapient.oo.state.init;

public class Main {
    public static void main(String[] args) {
        Employee employee=new Employee();
        System.out.println(employee.getId() + " => " + employee.getName());
    }
}

Here the output would be 1 ,Subramaian
............................................................................................

What if i dont initalize the instance variables directly or setters /constructors?

class Employee
 private int id;
 private String name;
}

Java provide default values based on data types.

for integer data types(byte,short,int,long) => 0
for floating point types (float,double) => 0.0
for boolean => false
for char -> `\u0000'

For any reference types
String
Employee
Address    -> null

implicit default values provided by java, where as explicit default values provided by developer inside class or using setter or using constructors.
..............................................................................................

2. After object creating

incase if the variable is not private then we can reinitalize the variable 
using reference variable

employee.city = "coimbatore";
        System.out.println(employee.city);
        employee.setCity("Coimbatore");
        System.out.println(employee.getCity());
..............................................................................................
                3. During object creation : constructors


What is constructors 

  Constructors  are special method used to initialize the state during object creation.


How to declare constructor?

Employee.java

class Employee {}


Here no constructors? 
  if you dont provide constructor, the java will provide constructor automatically which is called "default constructor"
  After compilation, the compiler will add constructor automatically.

Employee.class
public class Employee {
   
    public Employee() {
    }
}

Syntax: 
=> constructor name and class name must match
=> constructor can be private , public,default
=> constructors can take args, where we can initalze the state.

Explicit constructors:
......................

public class Customer {
    private int id;
    private String name;

    //constructor - no arg constructor
    public Customer() {
        this.id = 10;
        this.name = "foo";
    }
}

Employee emp = new Employee();
			|
                    Constructor call

parameterized constructor:
  state can be initalized in different ways.

Constructor overloading:
   Having different constructors, and initalizing the state according to our neeed.

eg:
  i want to pass only id, then we can use one constructor
  i want to pass id and name, then we can use another constructor

Constructors are differentiated by type and order of the type, not by names, 

valid;

public class Customer {
    private int id;
    private String name;
    private String city;

  //two args
    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    //only Name
    public Customer(String name){
        this.name = name;
    }
    public Customer(String city,int id){
        this.city = city;
    }
}

invalid
public class Customer {
    private int id;
    private String name;
    private String city;

  //two args
    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }
    public Customer(int id,String city){
        this.city = city;
        this.id =id;
  
    }
}
.............................................................................................
			constructors vs setter

Both are valid and good.

=>constructors are used to initalize during object creation - earger initalization
=>setters are used to initalize the object after its creation -  lazy intialzation.
.............................................................................................
				this keyword
.............................................................................................

Reference variable:

 It is variable which refers the location of Object.

Employee emp = new Employee();

emp-> reference variable

Types of Reference variables:
............................

1.Emplicit reference variable
 The reference variable declared and assinged in the code by the developer

Employee emp = new Employee();

 emp-> Explicit reference variable


2.implicit reference variable
 
 The reference variable assinged by compiler during compile time and used by jvm during runtime.

 "this" and "super" are reference variables assinged by compiler.

 "this"
    =>just variable points to the current object. 

Every object in java , has "this" reference variable.
..............................................................................................
			When we can use "this" variable
............................................................................................

There are contexts:

1.inside setter method to differentiate local variable and instance variable, which avoids ambiquity.


public class Employee {
    private int id;

    public void setId(int id) {
        id = id;
    }

    public int getId() {
        return id;
    }
}
 Employee employee = new Employee();
        employee.setId(100);
        System.out.println(employee.getId());

What will be output?

 here - 0

why because, instance variable id , not initalized with 100

 public void setId(int id) {
        id = id;
    }
here the compiler has confusion over left and right side. here leftside(id) and rightside(id)
is treated as same.but we are accessing instance variable via getter.

in order to avoid this ambiquity, we need to differentiate local variable and instance variable by using this keyword explicitly.


2.inside constructors to differentiate local variable and instance variable, which avoids ambiquity.

    public Employee(int id){
        this.id = id;
    }

3.Calling constructors.

 

 



































 
 











































































































  













 
   










































































































  
 

















































