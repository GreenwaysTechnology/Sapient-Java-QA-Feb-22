                           
				 Web Services
.............................................................................................
History of Web:

1989 - Web was created in order to distribute documents over internet(Type of network)

Web Application:
  It is type of distributed application , introduced in 1989.

Web Application Types

1.Static web application
1989 -1995
    Only hand coded html pages
2.Dynamic content web application
1996 - till date
   html pages are created by programs automatically
   CGI- Perl,c
   J2EE - Servlets/JSP
   ASP  - MicroSoft
   PHP   -Open Source

3.Web Services
1998 - Inter application communcation - B2B(Biz to Biz).
 One biz need to send data to other biz via internet with web ,not html pages 
Lets assume A company whose system is running on java, B is Company whose system is running on Php, now A needs to send data in the form of document to B, so that B can process that document.
   
WebService is a program can be written in any language(java,c++,C#,php,python), which distributes data in the format of xml,pdf,word,excel,json.. to other system


Web Services Types:

1.XML based Web Service/SOAP Based Web Service

 This is type of web service introduced first.

 In this model, the server side program , which generates xml files and send over internet via http protocal, but http protocal can be used to send only html docs,  then how to send xml files , new protocal was introduced called "SOAP"(Simple Object Access Protocal).

SOAP is application level protocal , uses http protocal to send and receive XML Files.

SOAP based web service model almost deprecated from the industry. No body is now a days creating soap based web services


How to implement soap based Web Service?
 
You can implement in any language.

How to implement soap based web services in java language?

JAX-WS -  Java api for XML - WebService

=>Apache CXF  is most popular framework for building soap based webservice
=>Spring-WS  is the framework from the spring team to build soap based webServices

Service Oriented Architecture(SOA):
................................
Service-Oriented Architecture (SOA) is a style of software design where services are provided to the other components by application components, through a communication protocol over a network. 
SOA is built on the top of SOAP based webservices

SOAP based web Service Technologies:

1.WSDL -  WebService Description language

WSDL is description of program, used by the frameworks to generate code.

Applications uses wsdl to generate code , language independant manner.

Wsdl file

<?xml version="1.0"?>
<definitions name="StockQuote"

targetNamespace="http://example.com/stockquote.wsdl"
          xmlns:tns="http://example.com/stockquote.wsdl"
          xmlns:xsd1="http://example.com/stockquote.xsd"
          xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
          xmlns="http://schemas.xmlsoap.org/wsdl/">

    <types>
       <schema targetNamespace="http://example.com/stockquote.xsd"
              xmlns="http://www.w3.org/2000/10/XMLSchema">
           <element name="TradePriceRequest">
              <complexType>
                  <all>
                      <element name="tickerSymbol" type="string"/>
                  </all>
              </complexType>
           </element>
           <element name="TradePrice">
              <complexType>
                  <all>
                      <element name="price" type="float"/>
                  </all>
              </complexType>
           </element>
       </schema>
    </types>

    <message name="GetLastTradePriceInput">
        <part name="body" element="xsd1:TradePriceRequest"/>
    </message>

    <message name="GetLastTradePriceOutput">
        <part name="body" element="xsd1:TradePrice"/>
    </message>

    <portType name="StockQuotePortType">
        <operation name="GetLastTradePrice">
           <input message="tns:GetLastTradePriceInput"/>
           <output message="tns:GetLastTradePriceOutput"/>
        </operation>
    </portType>

    <binding name="StockQuoteSoapBinding" type="tns:StockQuotePortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="GetLastTradePrice">
           <soap:operation soapAction="http://example.com/GetLastTradePrice"/>
           <input>
               <soap:body use="literal"/>
           </input>
           <output>
               <soap:body use="literal"/>
           </output>
        </operation>
    </binding>

    <service name="StockQuoteService">
        <documentation>My first service</documentation>
        <port name="StockQuotePort" binding="tns:StockQuoteBinding">
           <soap:address location="http://example.com/stockquote"/>
        </port>
    </service>
</definitions>
..............................................................................................Tools for accessing SOAP based webservices:

1.SOAP UI
  SOAP UI is most powerfull tool for testers to test APIs written in any API technology-(SOAP,REST,GraphQL).

2.POST MAN tool
   POST MAN tool from the google but it  is open source

2.RESTFull Web Services
   It is type of webservices inspired from the specification published by http core team

Roy Thomas Fielding (born 1965) is an American computer scientist, one of the principal authors of the HTTP specification and the originator of the Representational State Transfer (REST) architectural style.

Based on REST Principles the implemenation was created called "RESTFull" 

REST VS RESTFull

REST is a spec
RESTFull is implementation 

Based on REST theroy, webservices were designed called "RESTFull Webservices".


in order to build Restfull webservices, any language can be used.

Java and RestFull web services:

=>JAX-RS -  JAVA API For Rest Full Architecture

Implemention:
RESTEasy  - framework created by Jboss team
SpringRest - framework from the spring team -  This is widely used in the market.
Vertx
Quarkus
etc....

Based on Restfull architecture , Microservices were created.


4.Single Page Web Application(SPA)

  Introduced in 2007 by w3c, in order to build client side web application.

SPA applications frameworks -  Angular,React,vue.......
..............................................................................................
				REST Implemenation
.............................................................................................

Select Framework:

 SpringBoot
Setup project
https://start.spring.io/
..............................................................................................

Core Rest Concepts:

RESTFull Web Service is  a program which receives request and returns response in the form of json by default.

Resource:
   It represents a domain object which returns data.
   Resource is  a java class 

HTTP verbs:

 Clients those who want to access REST APIs who gives request via http protocal.
 with http methods are called HTTP verbs.

Verbs/method:
 
 GET
    To read data from the server(WebService)
 POST 
    to send data from the client to server for insert operation

 PUT
    to send data from the client to server for update operation
 
 DELETE
    to send data from the client to server for delete operations

 READ INSERT UPDATE DELETE

 CREATE(INSERT/POST) UPDATE(PUT) READ(GET) DELETE(Delete) => CURD Operations


DATA format:
  Client and servers agree the common data format for sending receiving : Representation

REST arch supports many formats like json,xml,html,pdf,word......but soap web services only support "XML"


URI : Uniform Resource Indifier:
  To identifiy /locate the resource in the server by client , who uses a naming scheme called URI
 api/resourceName/subresource

URL : 
  Full path of uri
 
http://serverName/api/resourceName/subresource

http://localhost:8080/api/resourceName/subresource



Create Simple RESTFull Web Service using Spring Boot.


Steps:

1.create resource class.
public class GreeterController {
}

2.Indicate the class as "RestFull WebService"
 Using an annotation @RestController

package com.example.demo.rest;

import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreeterController {
}
3.add methods in order to implement CURD
package com.example.demo.rest;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreeterController {

    //This method to be called by the client using GET method
    @GetMapping("/api/hello")
    public String sayHello() {
        return "Hello Rest";
    }

}

4.Run the code

package com.example.demo.rest;

import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
public class GreeterController {

    //This method to be called by the client using GET method
    @GetMapping("/api/hello")
    public String sayHello() {
        return "Hello Rest";
    }

    @GetMapping("/api/greet")
    public Greeting sayGreet() {
        return new Greeting("Greet");
    }

    @GetMapping("/api/greet/list")
    public List<Greeting> listGreetings() {
        List<Greeting> greetings = new ArrayList<>();
        greetings.add(new Greeting("Hello"));
        greetings.add(new Greeting("Hai"));
        greetings.add(new Greeting("welcome"));
        greetings.add(new Greeting("welcome"));
        greetings.add(new Greeting("bye"));
        return greetings;
    }

    //post request
    @PostMapping("/api/greet")
    public String save(@RequestBody Greeting greeting) {
        System.out.println(greeting);
        return "saved";
    }

    //dynamic url  /api/greet/john => Hello John
    @GetMapping("/api/greet/{name}/{salary}") // {} place holder, here name is replaced with value
    public Greeting findByName(@PathVariable String name, @PathVariable double salary) {
        return new Greeting("Hello " + name);
    }

    //update
    @PutMapping("/api/greet")
    public String updateGreet() {
        return "Updated";
    }

    //delete
    @DeleteMapping("/api/greet")
    public String removeGreet() {
        return "Deleted";
    }
}
..............................................................................................
				REST Integration with database(mysql)
..............................................................................................

Web Layer
JPA With Hibernate  - Java Persistency api -  wrapper for JDBC
Database - you can select any database - mysql,h2,derby......


Dependencies:
dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

application.properties  - connection configuration:
# Connection string properties
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/classicmodels
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql:true
............................................................................................
ORM - Object relational Mapping

Create Entity class:

Entity class which maps directly to the table.

package com.example.demo.rest;


import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;
    private String name;
    private String email;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}

Create Repository Class - This class contains ready made JDBC Operations.

package com.example.demo.rest;

import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Integer> {
}



package com.example.demo.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class UserRestController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping("/users")
    public List<User> findAll() {
        return userRepository.findAll();
    }

    @PostMapping("/user")
    public ResponseEntity<User> save(@RequestBody User user) {
        return ResponseEntity.ok(userRepository.save(user));
    }

    @PutMapping("/user/{id}")
    public User updateUser(@PathVariable int id, @RequestBody User user) {
        return userRepository.findById(id)
                .map(newUser -> {
                    newUser.setEmail(user.getEmail());
                    return userRepository.save(newUser);
                }).orElseGet(() -> user);
    }

    //delete operation
    @DeleteMapping("/user/{id}")
    public void deleteById(@PathVariable int id) {
        userRepository.deleteById(id);
    }
}
..............................................................................................
				SOAP UI Tool
.............................................................................................

Functional Testing:
  To Test functionlity of the soap webservices and also rest webservices.


SOAP Web Service Testing:
........................

Test Structure
  
SoapUI structures functional tests into three levels; 
1.TestSuites, 
2.TestCases
3.TestSteps.

A "TestSuite" is a collection of TestCases that can be used for grouping functional tests into logical units.
 Any number of TestSuites can be created inside a ReadyAPIject to support massive testing scenarios.

A TestCase is a collection of TestSteps that are assembled to test some specific aspect of your service(s).

You can add any number of TestCases to a containing TestSuite and even modularize them to call each other for complex testing scenarios.


TestSteps are the "building blocks" of functional tests in soapUI.
hey are added to a TestCase and used control the flow of execution and validate the functionality of the service(s) to be tested.

SOAP Request -- Response Model:

Request is XML file and Response also XML.
Request and Response sent over "SOAP Protcal"


Request Structure:
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.dataaccess.com/webservicesserver/">
   <soapenv:Header/>
   <soapenv:Body>
      <web:NumberToDollars>
         <web:dNum>?</web:dNum>
      </web:NumberToDollars>
   </soapenv:Body>
</soapenv:Envelope>


Response Structure:
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <m:NumberToDollarsResponse xmlns:m="http://www.dataaccess.com/webservicesserver/">
         <m:NumberToDollarsResult>ten dollars</m:NumberToDollarsResult>
      </m:NumberToDollarsResponse>
   </soap:Body>
</soap:Envelope>

How to do functional Testing in soap ui?

Steps:

1.Create Test Suite

2.Create Test Case

3.Create Test Step

https://www.soapui.org/docs/functional-testing/getting-started/

In SOAP UI Test suite ,Test case ,Test Step all are automated scripts written in language called "groovy"

Assertions:
  conditions, based on conditions we can verify the validity of response.

Types of assertions:

1.Property content
2.status 
3.Script
4.SLA
5.JMS
6.Security

Contains Assertions
  To test whether data present in the response or not.
Which eq to assertEqual(10,10) => Out put of this would be "Valid" | "Invalid"

XPath Assertions: (YOu need to know XML Xpath Technology)

XQuery Assertions

Scripting Assertions : using groovy Script

Demo On 
Contains Assertions
Not Contains Assertions

..............................................................................................
					Mocking

What is Mocking?

  Mocking means faking the real service / api /database.

Why Mock?
  
  In Testing ,we should not test the application against real database, external services, like so.


Advantages of Mocking?

1.It isloates the Testing env from the real env.
2.Application can be tested without real data,api.
3.without application features ready , also we can test - Acceptance Testing.

SOAP UI can help use to create mock env for SOAP service testing.

SOAP UI creates local mock server like remote server, where soapui hosts the application what we are testing.

Demo on mocking services for calcuator.
.............................................................................................
				REST API Testing using SOAPUI
..............................................................................................

in order to rest api in soapui 

we need files

1.WSDL - For SOAP based web service
2.WADL  - For Rest based web service


What is WADL ?
  The Web Application Description Language(WADL) is machine-readable XML language that works on HTTP based web service.

<application xmlns="http://wadl.dev.java.net/2009/02">
   <doc xml:lang="en" title="https://restcountries.com"/>
   <resources base="https://restcountries.com">
      <resource path="v3.1/all" id="All">
         <doc xml:lang="en" title="All"/>
         <method name="GET" id="All 1">
            <doc xml:lang="en" title="All 1"/>
            <request/>
            <response status="200">
               <representation mediaType="application/json" element="Response"/>
            </response>
         </method>
      </resource>
   </resources>
</application>

Functional REST API Testing using SOAP UI

1.Test Suite
2.Test case
3.Test step

Create a mock servers and test against it.
.............................................................................................

























